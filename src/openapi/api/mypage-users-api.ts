/* tslint:disable */
/* eslint-disable */
/**
 * mtg_server
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import globalAxios, {AxiosInstance, AxiosPromise} from 'axios';
import {Configuration} from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import {
    assertParamExists,
    createRequestFunction,
    DUMMY_BASE_URL,
    serializeDataIfNeeded,
    setApiKeyToObject,
    setBasicAuthToObject,
    setBearerAuthToObject,
    setOAuthToObject,
    setSearchParams,
    toPathString
} from '../common';
// @ts-ignore
import {BASE_PATH, BaseAPI, COLLECTION_FORMATS, RequestArgs, RequiredError} from '../base';
// @ts-ignore
// @ts-ignore
import {ApiMypageUsersToken, ApiUserSingle} from '../model';
import CONFIG from "../../const/DaoConfig";

/**
 * MypageUsersApi - axios parameter creator
 * @export
 */
export const MypageUsersApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         *
         * @summary get UserInfo By Email
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMypageUser: async (options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/mypage/users`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = {method: 'POST', ...baseOptions, ...options};
            let localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarHeaderParameter = CONFIG().CONFIG_HEADER().headers

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Update users token
         * @param {ApiMypageUsersToken} apiMypageUsersToken update users token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateMypageUsersToken: async (apiMypageUsersToken: ApiMypageUsersToken, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'apiMypageUsersToken' is not null or undefined
            assertParamExists('updateMypageUsersToken', 'apiMypageUsersToken', apiMypageUsersToken)
            const localVarPath = `/mypage/users/token`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = {method: 'PUT', ...baseOptions, ...options};
            let localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarHeaderParameter = CONFIG().CONFIG_HEADER().headers

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(apiMypageUsersToken, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * MypageUsersApi - functional programming interface
 * @export
 */
export const MypageUsersApiFp = function (configuration?: Configuration) {
    const localVarAxiosParamCreator = MypageUsersApiAxiosParamCreator(configuration)
    return {
        /**
         *
         * @summary get UserInfo By Email
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getMypageUser(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApiUserSingle>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getMypageUser(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         *
         * @summary Update users token
         * @param {ApiMypageUsersToken} apiMypageUsersToken update users token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateMypageUsersToken(apiMypageUsersToken: ApiMypageUsersToken, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateMypageUsersToken(apiMypageUsersToken, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * MypageUsersApi - factory interface
 * @export
 */
export const MypageUsersApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = MypageUsersApiFp(configuration)
    return {
        /**
         *
         * @summary get UserInfo By Email
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMypageUser(options?: any): AxiosPromise<ApiUserSingle> {
            return localVarFp.getMypageUser(options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Update users token
         * @param {ApiMypageUsersToken} apiMypageUsersToken update users token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateMypageUsersToken(apiMypageUsersToken: ApiMypageUsersToken, options?: any): AxiosPromise<void> {
            return localVarFp.updateMypageUsersToken(apiMypageUsersToken, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * MypageUsersApi - object-oriented interface
 * @export
 * @class MypageUsersApi
 * @extends {BaseAPI}
 */
export class MypageUsersApi extends BaseAPI {
    /**
     *
     * @summary get UserInfo By Email
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MypageUsersApi
     */
    public getMypageUser(options?: any) {
        return MypageUsersApiFp(this.configuration).getMypageUser(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     *
     * @summary Update users token
     * @param {ApiMypageUsersToken} apiMypageUsersToken update users token
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MypageUsersApi
     */
    public updateMypageUsersToken(apiMypageUsersToken: ApiMypageUsersToken, options?: any) {
        return MypageUsersApiFp(this.configuration).updateMypageUsersToken(apiMypageUsersToken, options).then((request) => request(this.axios, this.basePath));
    }
}
