/* tslint:disable */
/* eslint-disable */
/**
 * esint_server
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import globalAxios, {AxiosInstance, AxiosPromise} from 'axios';
import {Configuration} from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import {
    assertParamExists,
    createRequestFunction,
    DUMMY_BASE_URL,
    serializeDataIfNeeded,
    setApiKeyToObject,
    setBasicAuthToObject,
    setBearerAuthToObject,
    setOAuthToObject,
    setSearchParams,
    toPathString
} from '../common';
// @ts-ignore
import {BASE_PATH, BaseAPI, COLLECTION_FORMATS, RequestArgs, RequiredError} from '../base';
// @ts-ignore
// @ts-ignore
// @ts-ignore
// @ts-ignore
import {ApiMatchWord, ApiMatchWords, ApiMatchWordSingle, ApiMatchWordToAdd} from '../model';

/**
 * MatchWordApi - axios parameter creator
 * @export
 */
export const MatchWordApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         *
         * @summary Add a new MatchWord
         * @param {ApiMatchWordToAdd} apiMatchWordToAdd MatchWord object that needs to be added
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addMatchWord: async (apiMatchWordToAdd: ApiMatchWordToAdd, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'apiMatchWordToAdd' is not null or undefined
            assertParamExists('addMatchWord', 'apiMatchWordToAdd', apiMatchWordToAdd)
            const localVarPath = `/matchWords`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = {method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(apiMatchWordToAdd, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Deletes a matchWord
         * @param {number} matchWordId MatchWord id to delete
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteMatchWord: async (matchWordId: number, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'matchWordId' is not null or undefined
            assertParamExists('deleteMatchWord', 'matchWordId', matchWordId)
            const localVarPath = `/matchWords/{matchWordId}`
                .replace(`{${"matchWordId"}}`, encodeURIComponent(String(matchWordId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = {method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Returns matchWords inventories by status
         * @param {string} [sort] sorting column
         * @param {string} [order] ASC / DESC
         * @param {number} [start] Start position of retrieved data
         * @param {number} [end] End position of retrieved data
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllMatchWords: async (sort?: string, order?: string, start?: number, end?: number, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/matchWords`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = {method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (sort !== undefined) {
                localVarQueryParameter['_sort'] = sort;
            }

            if (order !== undefined) {
                localVarQueryParameter['_order'] = order;
            }

            if (start !== undefined) {
                localVarQueryParameter['_start'] = start;
            }

            if (end !== undefined) {
                localVarQueryParameter['_end'] = end;
            }


            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns a single matchWord
         * @summary Find MatchWord by ID
         * @param {number} matchWordId ID of matchWord to return
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMatchWordById: async (matchWordId: number, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'matchWordId' is not null or undefined
            assertParamExists('getMatchWordById', 'matchWordId', matchWordId)
            const localVarPath = `/matchWords/{matchWordId}`
                .replace(`{${"matchWordId"}}`, encodeURIComponent(String(matchWordId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = {method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Update an existing MatchWord
         * @param {number} matchWordId ID of matchWord to return
         * @param {ApiMatchWord} apiMatchWord MatchWord object that needs to be added to the store
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateMatchWord: async (matchWordId: number, apiMatchWord: ApiMatchWord, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'matchWordId' is not null or undefined
            assertParamExists('updateMatchWord', 'matchWordId', matchWordId)
            // verify required parameter 'apiMatchWord' is not null or undefined
            assertParamExists('updateMatchWord', 'apiMatchWord', apiMatchWord)
            const localVarPath = `/matchWords/{matchWordId}`
                .replace(`{${"matchWordId"}}`, encodeURIComponent(String(matchWordId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = {method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(apiMatchWord, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * MatchWordApi - functional programming interface
 * @export
 */
export const MatchWordApiFp = function (configuration?: Configuration) {
    const localVarAxiosParamCreator = MatchWordApiAxiosParamCreator(configuration)
    return {
        /**
         *
         * @summary Add a new MatchWord
         * @param {ApiMatchWordToAdd} apiMatchWordToAdd MatchWord object that needs to be added
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async addMatchWord(apiMatchWordToAdd: ApiMatchWordToAdd, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApiMatchWordSingle>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.addMatchWord(apiMatchWordToAdd, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         *
         * @summary Deletes a matchWord
         * @param {number} matchWordId MatchWord id to delete
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteMatchWord(matchWordId: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApiMatchWordSingle>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteMatchWord(matchWordId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         *
         * @summary Returns matchWords inventories by status
         * @param {string} [sort] sorting column
         * @param {string} [order] ASC / DESC
         * @param {number} [start] Start position of retrieved data
         * @param {number} [end] End position of retrieved data
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAllMatchWords(sort?: string, order?: string, start?: number, end?: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApiMatchWords>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAllMatchWords(sort, order, start, end, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Returns a single matchWord
         * @summary Find MatchWord by ID
         * @param {number} matchWordId ID of matchWord to return
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getMatchWordById(matchWordId: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApiMatchWordSingle>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getMatchWordById(matchWordId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         *
         * @summary Update an existing MatchWord
         * @param {number} matchWordId ID of matchWord to return
         * @param {ApiMatchWord} apiMatchWord MatchWord object that needs to be added to the store
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateMatchWord(matchWordId: number, apiMatchWord: ApiMatchWord, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApiMatchWordSingle>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateMatchWord(matchWordId, apiMatchWord, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * MatchWordApi - factory interface
 * @export
 */
export const MatchWordApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = MatchWordApiFp(configuration)
    return {
        /**
         *
         * @summary Add a new MatchWord
         * @param {ApiMatchWordToAdd} apiMatchWordToAdd MatchWord object that needs to be added
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addMatchWord(apiMatchWordToAdd: ApiMatchWordToAdd, options?: any): AxiosPromise<ApiMatchWordSingle> {
            return localVarFp.addMatchWord(apiMatchWordToAdd, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Deletes a matchWord
         * @param {number} matchWordId MatchWord id to delete
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteMatchWord(matchWordId: number, options?: any): AxiosPromise<ApiMatchWordSingle> {
            return localVarFp.deleteMatchWord(matchWordId, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Returns matchWords inventories by status
         * @param {string} [sort] sorting column
         * @param {string} [order] ASC / DESC
         * @param {number} [start] Start position of retrieved data
         * @param {number} [end] End position of retrieved data
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllMatchWords(sort?: string, order?: string, start?: number, end?: number, options?: any): AxiosPromise<ApiMatchWords> {
            return localVarFp.getAllMatchWords(sort, order, start, end, options).then((request) => request(axios, basePath));
        },
        /**
         * Returns a single matchWord
         * @summary Find MatchWord by ID
         * @param {number} matchWordId ID of matchWord to return
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMatchWordById(matchWordId: number, options?: any): AxiosPromise<ApiMatchWordSingle> {
            return localVarFp.getMatchWordById(matchWordId, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Update an existing MatchWord
         * @param {number} matchWordId ID of matchWord to return
         * @param {ApiMatchWord} apiMatchWord MatchWord object that needs to be added to the store
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateMatchWord(matchWordId: number, apiMatchWord: ApiMatchWord, options?: any): AxiosPromise<ApiMatchWordSingle> {
            return localVarFp.updateMatchWord(matchWordId, apiMatchWord, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * MatchWordApi - object-oriented interface
 * @export
 * @class MatchWordApi
 * @extends {BaseAPI}
 */
export class MatchWordApi extends BaseAPI {
    /**
     *
     * @summary Add a new MatchWord
     * @param {ApiMatchWordToAdd} apiMatchWordToAdd MatchWord object that needs to be added
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MatchWordApi
     */
    public addMatchWord(apiMatchWordToAdd: ApiMatchWordToAdd, options?: any) {
        return MatchWordApiFp(this.configuration).addMatchWord(apiMatchWordToAdd, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     *
     * @summary Deletes a matchWord
     * @param {number} matchWordId MatchWord id to delete
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MatchWordApi
     */
    public deleteMatchWord(matchWordId: number, options?: any) {
        return MatchWordApiFp(this.configuration).deleteMatchWord(matchWordId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     *
     * @summary Returns matchWords inventories by status
     * @param {string} [sort] sorting column
     * @param {string} [order] ASC / DESC
     * @param {number} [start] Start position of retrieved data
     * @param {number} [end] End position of retrieved data
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MatchWordApi
     */
    public getAllMatchWords(sort?: string, order?: string, start?: number, end?: number, options?: any) {
        return MatchWordApiFp(this.configuration).getAllMatchWords(sort, order, start, end, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Returns a single matchWord
     * @summary Find MatchWord by ID
     * @param {number} matchWordId ID of matchWord to return
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MatchWordApi
     */
    public getMatchWordById(matchWordId: number, options?: any) {
        return MatchWordApiFp(this.configuration).getMatchWordById(matchWordId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     *
     * @summary Update an existing MatchWord
     * @param {number} matchWordId ID of matchWord to return
     * @param {ApiMatchWord} apiMatchWord MatchWord object that needs to be added to the store
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MatchWordApi
     */
    public updateMatchWord(matchWordId: number, apiMatchWord: ApiMatchWord, options?: any) {
        return MatchWordApiFp(this.configuration).updateMatchWord(matchWordId, apiMatchWord, options).then((request) => request(this.axios, this.basePath));
    }
}
