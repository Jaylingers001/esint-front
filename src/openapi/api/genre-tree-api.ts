/* tslint:disable */
/* eslint-disable */
/**
 * mtg_server
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import globalAxios, {AxiosInstance, AxiosPromise} from 'axios';
import {Configuration} from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import {
    assertParamExists,
    createRequestFunction,
    DUMMY_BASE_URL,
    serializeDataIfNeeded,
    setApiKeyToObject,
    setBasicAuthToObject,
    setBearerAuthToObject,
    setOAuthToObject,
    setSearchParams,
    toPathString
} from '../common';
// @ts-ignore
import {BASE_PATH, BaseAPI, COLLECTION_FORMATS, RequestArgs, RequiredError} from '../base';
// @ts-ignore
// @ts-ignore
// @ts-ignore
import {ApiGenreTree, ApiGenreTrees, ApiGenreTreeSingle} from '../model';

/**
 * GenreTreeApi - axios parameter creator
 * @export
 */
export const GenreTreeApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         *
         * @summary Returns genreTrees inventories by status
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllGenreTrees: async (options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/genreTrees`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = {method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns a single genreTree
         * @summary Find GenreTree by ID
         * @param {number} genreId ID of genreTree to return
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getGenreTreeById: async (genreId: number, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'genreId' is not null or undefined
            assertParamExists('getGenreTreeById', 'genreId', genreId)
            const localVarPath = `/genreTrees/{genreId}`
                .replace(`{${"genreId"}}`, encodeURIComponent(String(genreId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = {method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Update an existing GenreTree
         * @param {number} genreId ID of genreTree to return
         * @param {ApiGenreTree} apiGenreTree GenreTree object that needs to be added to the store
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateGenreTree: async (genreId: number, apiGenreTree: ApiGenreTree, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'genreId' is not null or undefined
            assertParamExists('updateGenreTree', 'genreId', genreId)
            // verify required parameter 'apiGenreTree' is not null or undefined
            assertParamExists('updateGenreTree', 'apiGenreTree', apiGenreTree)
            const localVarPath = `/genreTrees/{genreId}`
                .replace(`{${"genreId"}}`, encodeURIComponent(String(genreId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = {method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(apiGenreTree, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * GenreTreeApi - functional programming interface
 * @export
 */
export const GenreTreeApiFp = function (configuration?: Configuration) {
    const localVarAxiosParamCreator = GenreTreeApiAxiosParamCreator(configuration)
    return {
        /**
         *
         * @summary Returns genreTrees inventories by status
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAllGenreTrees(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApiGenreTrees>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAllGenreTrees(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Returns a single genreTree
         * @summary Find GenreTree by ID
         * @param {number} genreId ID of genreTree to return
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getGenreTreeById(genreId: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApiGenreTreeSingle>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getGenreTreeById(genreId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         *
         * @summary Update an existing GenreTree
         * @param {number} genreId ID of genreTree to return
         * @param {ApiGenreTree} apiGenreTree GenreTree object that needs to be added to the store
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateGenreTree(genreId: number, apiGenreTree: ApiGenreTree, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApiGenreTreeSingle>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateGenreTree(genreId, apiGenreTree, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * GenreTreeApi - factory interface
 * @export
 */
export const GenreTreeApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = GenreTreeApiFp(configuration)
    return {
        /**
         *
         * @summary Returns genreTrees inventories by status
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllGenreTrees(options?: any): AxiosPromise<ApiGenreTrees> {
            return localVarFp.getAllGenreTrees(options).then((request) => request(axios, basePath));
        },
        /**
         * Returns a single genreTree
         * @summary Find GenreTree by ID
         * @param {number} genreId ID of genreTree to return
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getGenreTreeById(genreId: number, options?: any): AxiosPromise<ApiGenreTreeSingle> {
            return localVarFp.getGenreTreeById(genreId, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Update an existing GenreTree
         * @param {number} genreId ID of genreTree to return
         * @param {ApiGenreTree} apiGenreTree GenreTree object that needs to be added to the store
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateGenreTree(genreId: number, apiGenreTree: ApiGenreTree, options?: any): AxiosPromise<ApiGenreTreeSingle> {
            return localVarFp.updateGenreTree(genreId, apiGenreTree, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * GenreTreeApi - object-oriented interface
 * @export
 * @class GenreTreeApi
 * @extends {BaseAPI}
 */
export class GenreTreeApi extends BaseAPI {
    /**
     *
     * @summary Returns genreTrees inventories by status
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GenreTreeApi
     */
    public getAllGenreTrees(options?: any) {
        return GenreTreeApiFp(this.configuration).getAllGenreTrees(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Returns a single genreTree
     * @summary Find GenreTree by ID
     * @param {number} genreId ID of genreTree to return
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GenreTreeApi
     */
    public getGenreTreeById(genreId: number, options?: any) {
        return GenreTreeApiFp(this.configuration).getGenreTreeById(genreId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     *
     * @summary Update an existing GenreTree
     * @param {number} genreId ID of genreTree to return
     * @param {ApiGenreTree} apiGenreTree GenreTree object that needs to be added to the store
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GenreTreeApi
     */
    public updateGenreTree(genreId: number, apiGenreTree: ApiGenreTree, options?: any) {
        return GenreTreeApiFp(this.configuration).updateGenreTree(genreId, apiGenreTree, options).then((request) => request(this.axios, this.basePath));
    }
}
