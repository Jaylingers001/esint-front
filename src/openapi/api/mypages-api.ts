/* tslint:disable */
/* eslint-disable */
/**
 * mtg_server
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import globalAxios, {AxiosInstance, AxiosPromise} from 'axios';
import {Configuration} from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import {
    assertParamExists,
    createRequestFunction,
    DUMMY_BASE_URL,
    serializeDataIfNeeded,
    setApiKeyToObject,
    setBasicAuthToObject,
    setBearerAuthToObject,
    setOAuthToObject,
    setSearchParams,
    toPathString
} from '../common';
// @ts-ignore
import {BASE_PATH, BaseAPI, COLLECTION_FORMATS, RequestArgs, RequiredError} from '../base';
// @ts-ignore
// @ts-ignore
// @ts-ignore
import {ApiUserProfile, ApiUserProfileImageToAdd, ApiUserProfileToAdd} from '../model';
import CONFIG from "../../const/DaoConfig";

/**
 * MypagesApi - axios parameter creator
 * @export
 */
export const MypagesApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Returns a single user
         * @summary Find profile by ID for Front
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUserProfileById: async (options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/mypage/profile`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            let localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarHeaderParameter = CONFIG().CONFIG_HEADER().headers
    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Update an existing userProfile
         * @param {ApiUserProfileToAdd} apiUserProfileToAdd mailTemplate object that needs to be added to the store
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateUserProfileById: async (apiUserProfileToAdd: ApiUserProfileToAdd, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'apiUserProfileToAdd' is not null or undefined
            assertParamExists('updateUserProfileById', 'apiUserProfileToAdd', apiUserProfileToAdd)
            const localVarPath = `/mypage/profile/edit`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            let localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarHeaderParameter = CONFIG().CONFIG_HEADER().headers

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(apiUserProfileToAdd, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Update an existing userProfile image
         * @param {ApiUserProfileImageToAdd} apiUserProfileImageToAdd mailTemplate object that needs to be added to the store
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateUserProfileImageById: async (apiUserProfileImageToAdd: ApiUserProfileImageToAdd, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'apiUserProfileImageToAdd' is not null or undefined
            assertParamExists('updateUserProfileImageById', 'apiUserProfileImageToAdd', apiUserProfileImageToAdd)
            const localVarPath = `/mypage/profile/impageUpload`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            let localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarHeaderParameter = CONFIG().CONFIG_HEADER().headers

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(apiUserProfileImageToAdd, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * MypagesApi - functional programming interface
 * @export
 */
export const MypagesApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = MypagesApiAxiosParamCreator(configuration)
    return {
        /**
         * Returns a single user
         * @summary Find profile by ID for Front
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getUserProfileById(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApiUserProfile>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getUserProfileById(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Update an existing userProfile
         * @param {ApiUserProfileToAdd} apiUserProfileToAdd mailTemplate object that needs to be added to the store
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateUserProfileById(apiUserProfileToAdd: ApiUserProfileToAdd, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApiUserProfile>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateUserProfileById(apiUserProfileToAdd, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Update an existing userProfile image
         * @param {ApiUserProfileImageToAdd} apiUserProfileImageToAdd mailTemplate object that needs to be added to the store
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateUserProfileImageById(apiUserProfileImageToAdd: ApiUserProfileImageToAdd, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApiUserProfile>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateUserProfileImageById(apiUserProfileImageToAdd, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * MypagesApi - factory interface
 * @export
 */
export const MypagesApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = MypagesApiFp(configuration)
    return {
        /**
         * Returns a single user
         * @summary Find profile by ID for Front
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUserProfileById(options?: any): AxiosPromise<ApiUserProfile> {
            return localVarFp.getUserProfileById(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Update an existing userProfile
         * @param {ApiUserProfileToAdd} apiUserProfileToAdd mailTemplate object that needs to be added to the store
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateUserProfileById(apiUserProfileToAdd: ApiUserProfileToAdd, options?: any): AxiosPromise<ApiUserProfile> {
            return localVarFp.updateUserProfileById(apiUserProfileToAdd, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Update an existing userProfile image
         * @param {ApiUserProfileImageToAdd} apiUserProfileImageToAdd mailTemplate object that needs to be added to the store
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateUserProfileImageById(apiUserProfileImageToAdd: ApiUserProfileImageToAdd, options?: any): AxiosPromise<ApiUserProfile> {
            return localVarFp.updateUserProfileImageById(apiUserProfileImageToAdd, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * MypagesApi - object-oriented interface
 * @export
 * @class MypagesApi
 * @extends {BaseAPI}
 */
export class MypagesApi extends BaseAPI {
    /**
     * Returns a single user
     * @summary Find profile by ID for Front
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MypagesApi
     */
    public getUserProfileById(options?: any) {
        return MypagesApiFp(this.configuration).getUserProfileById(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Update an existing userProfile
     * @param {ApiUserProfileToAdd} apiUserProfileToAdd mailTemplate object that needs to be added to the store
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MypagesApi
     */
    public updateUserProfileById(apiUserProfileToAdd: ApiUserProfileToAdd, options?: any) {
        return MypagesApiFp(this.configuration).updateUserProfileById(apiUserProfileToAdd, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     *
     * @summary Update an existing userProfile image
     * @param {ApiUserProfileImageToAdd} apiUserProfileImageToAdd mailTemplate object that needs to be added to the store
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MypagesApi
     */
    public updateUserProfileImageById(apiUserProfileImageToAdd: ApiUserProfileImageToAdd, options?: any) {
        return MypagesApiFp(this.configuration).updateUserProfileImageById(apiUserProfileImageToAdd, options).then((request) => request(this.axios, this.basePath));
    }
}
