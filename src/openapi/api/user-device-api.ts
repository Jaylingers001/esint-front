/* tslint:disable */
/* eslint-disable */
/**
 * mtg_server
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import globalAxios, {AxiosInstance, AxiosPromise} from 'axios';
import {Configuration} from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import {
    assertParamExists,
    createRequestFunction,
    DUMMY_BASE_URL,
    serializeDataIfNeeded,
    setApiKeyToObject,
    setBasicAuthToObject,
    setBearerAuthToObject,
    setOAuthToObject,
    setSearchParams,
    toPathString
} from '../common';
// @ts-ignore
import {BASE_PATH, BaseAPI, COLLECTION_FORMATS, RequestArgs, RequiredError} from '../base';
// @ts-ignore
// @ts-ignore
// @ts-ignore
import {ApiUserDevice, ApiUserDeviceSingle, ApiUserDeviceToAdd} from '../model';

/**
 * UserDeviceApi - axios parameter creator
 * @export
 */
export const UserDeviceApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         *
         * @summary Add a new userDevice
         * @param {ApiUserDeviceToAdd} apiUserDeviceToAdd userDevice object that needs to be added
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addUserDevice: async (apiUserDeviceToAdd: ApiUserDeviceToAdd, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'apiUserDeviceToAdd' is not null or undefined
            assertParamExists('addUserDevice', 'apiUserDeviceToAdd', apiUserDeviceToAdd)
            const localVarPath = `/userDevices`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = {method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(apiUserDeviceToAdd, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Deletes a userDevice
         * @param {number} userDeviceId userDevice id to delete
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteUserDevice: async (userDeviceId: number, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'userDeviceId' is not null or undefined
            assertParamExists('deleteUserDevice', 'userDeviceId', userDeviceId)
            const localVarPath = `/userDevices/{userDeviceId}`
                .replace(`{${"userDeviceId"}}`, encodeURIComponent(String(userDeviceId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = {method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns a single userDevice
         * @summary Find userDevice by ID
         * @param {number} userDeviceId ID of userDevice to return
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUserDeviceById: async (userDeviceId: number, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'userDeviceId' is not null or undefined
            assertParamExists('getUserDeviceById', 'userDeviceId', userDeviceId)
            const localVarPath = `/userDevices/{userDeviceId}`
                .replace(`{${"userDeviceId"}}`, encodeURIComponent(String(userDeviceId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = {method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Update an existing userDevice
         * @param {number} userDeviceId ID of userDevice to return
         * @param {ApiUserDevice} apiUserDevice userDevice object that needs to be added to the store
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateUserDevice: async (userDeviceId: number, apiUserDevice: ApiUserDevice, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'userDeviceId' is not null or undefined
            assertParamExists('updateUserDevice', 'userDeviceId', userDeviceId)
            // verify required parameter 'apiUserDevice' is not null or undefined
            assertParamExists('updateUserDevice', 'apiUserDevice', apiUserDevice)
            const localVarPath = `/userDevices/{userDeviceId}`
                .replace(`{${"userDeviceId"}}`, encodeURIComponent(String(userDeviceId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = {method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(apiUserDevice, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * UserDeviceApi - functional programming interface
 * @export
 */
export const UserDeviceApiFp = function (configuration?: Configuration) {
    const localVarAxiosParamCreator = UserDeviceApiAxiosParamCreator(configuration)
    return {
        /**
         *
         * @summary Add a new userDevice
         * @param {ApiUserDeviceToAdd} apiUserDeviceToAdd userDevice object that needs to be added
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async addUserDevice(apiUserDeviceToAdd: ApiUserDeviceToAdd, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApiUserDeviceSingle>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.addUserDevice(apiUserDeviceToAdd, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         *
         * @summary Deletes a userDevice
         * @param {number} userDeviceId userDevice id to delete
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteUserDevice(userDeviceId: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApiUserDeviceSingle>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteUserDevice(userDeviceId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Returns a single userDevice
         * @summary Find userDevice by ID
         * @param {number} userDeviceId ID of userDevice to return
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getUserDeviceById(userDeviceId: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApiUserDeviceSingle>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getUserDeviceById(userDeviceId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         *
         * @summary Update an existing userDevice
         * @param {number} userDeviceId ID of userDevice to return
         * @param {ApiUserDevice} apiUserDevice userDevice object that needs to be added to the store
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateUserDevice(userDeviceId: number, apiUserDevice: ApiUserDevice, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApiUserDeviceSingle>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateUserDevice(userDeviceId, apiUserDevice, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * UserDeviceApi - factory interface
 * @export
 */
export const UserDeviceApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = UserDeviceApiFp(configuration)
    return {
        /**
         *
         * @summary Add a new userDevice
         * @param {ApiUserDeviceToAdd} apiUserDeviceToAdd userDevice object that needs to be added
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addUserDevice(apiUserDeviceToAdd: ApiUserDeviceToAdd, options?: any): AxiosPromise<ApiUserDeviceSingle> {
            return localVarFp.addUserDevice(apiUserDeviceToAdd, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Deletes a userDevice
         * @param {number} userDeviceId userDevice id to delete
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteUserDevice(userDeviceId: number, options?: any): AxiosPromise<ApiUserDeviceSingle> {
            return localVarFp.deleteUserDevice(userDeviceId, options).then((request) => request(axios, basePath));
        },
        /**
         * Returns a single userDevice
         * @summary Find userDevice by ID
         * @param {number} userDeviceId ID of userDevice to return
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUserDeviceById(userDeviceId: number, options?: any): AxiosPromise<ApiUserDeviceSingle> {
            return localVarFp.getUserDeviceById(userDeviceId, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Update an existing userDevice
         * @param {number} userDeviceId ID of userDevice to return
         * @param {ApiUserDevice} apiUserDevice userDevice object that needs to be added to the store
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateUserDevice(userDeviceId: number, apiUserDevice: ApiUserDevice, options?: any): AxiosPromise<ApiUserDeviceSingle> {
            return localVarFp.updateUserDevice(userDeviceId, apiUserDevice, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * UserDeviceApi - object-oriented interface
 * @export
 * @class UserDeviceApi
 * @extends {BaseAPI}
 */
export class UserDeviceApi extends BaseAPI {
    /**
     *
     * @summary Add a new userDevice
     * @param {ApiUserDeviceToAdd} apiUserDeviceToAdd userDevice object that needs to be added
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserDeviceApi
     */
    public addUserDevice(apiUserDeviceToAdd: ApiUserDeviceToAdd, options?: any) {
        return UserDeviceApiFp(this.configuration).addUserDevice(apiUserDeviceToAdd, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     *
     * @summary Deletes a userDevice
     * @param {number} userDeviceId userDevice id to delete
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserDeviceApi
     */
    public deleteUserDevice(userDeviceId: number, options?: any) {
        return UserDeviceApiFp(this.configuration).deleteUserDevice(userDeviceId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Returns a single userDevice
     * @summary Find userDevice by ID
     * @param {number} userDeviceId ID of userDevice to return
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserDeviceApi
     */
    public getUserDeviceById(userDeviceId: number, options?: any) {
        return UserDeviceApiFp(this.configuration).getUserDeviceById(userDeviceId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     *
     * @summary Update an existing userDevice
     * @param {number} userDeviceId ID of userDevice to return
     * @param {ApiUserDevice} apiUserDevice userDevice object that needs to be added to the store
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserDeviceApi
     */
    public updateUserDevice(userDeviceId: number, apiUserDevice: ApiUserDevice, options?: any) {
        return UserDeviceApiFp(this.configuration).updateUserDevice(userDeviceId, apiUserDevice, options).then((request) => request(this.axios, this.basePath));
    }
}
