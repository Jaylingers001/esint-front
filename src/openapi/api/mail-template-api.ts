/* tslint:disable */
/* eslint-disable */
/**
 * mtg_server
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import globalAxios, {AxiosInstance, AxiosPromise} from 'axios';
import {Configuration} from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import {
    assertParamExists,
    createRequestFunction,
    DUMMY_BASE_URL,
    serializeDataIfNeeded,
    setApiKeyToObject,
    setBasicAuthToObject,
    setBearerAuthToObject,
    setOAuthToObject,
    setSearchParams,
    toPathString
} from '../common';
// @ts-ignore
import {BASE_PATH, BaseAPI, COLLECTION_FORMATS, RequestArgs, RequiredError} from '../base';
// @ts-ignore
// @ts-ignore
// @ts-ignore
import {ApiMailTemplate, ApiMailTemplateSingle, ApiMailTemplateToAdd} from '../model';

/**
 * MailTemplateApi - axios parameter creator
 * @export
 */
export const MailTemplateApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         *
         * @summary Add a new mailTemplate
         * @param {ApiMailTemplateToAdd} apiMailTemplateToAdd mailTemplate object that needs to be added
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addMailTemplate: async (apiMailTemplateToAdd: ApiMailTemplateToAdd, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'apiMailTemplateToAdd' is not null or undefined
            assertParamExists('addMailTemplate', 'apiMailTemplateToAdd', apiMailTemplateToAdd)
            const localVarPath = `/mailTemplates`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = {method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(apiMailTemplateToAdd, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Deletes a mailTemplate
         * @param {number} mailTemplateId mailTemplate id to delete
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteMailTemplate: async (mailTemplateId: number, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'mailTemplateId' is not null or undefined
            assertParamExists('deleteMailTemplate', 'mailTemplateId', mailTemplateId)
            const localVarPath = `/mailTemplates/{mailTemplateId}`
                .replace(`{${"mailTemplateId"}}`, encodeURIComponent(String(mailTemplateId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = {method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns a single mailTemplate
         * @summary Find mailTemplate by ID
         * @param {number} mailTemplateId ID of mailTemplate to return
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMailTemplateById: async (mailTemplateId: number, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'mailTemplateId' is not null or undefined
            assertParamExists('getMailTemplateById', 'mailTemplateId', mailTemplateId)
            const localVarPath = `/mailTemplates/{mailTemplateId}`
                .replace(`{${"mailTemplateId"}}`, encodeURIComponent(String(mailTemplateId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = {method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Update an existing mailTemplate
         * @param {number} mailTemplateId ID of mailTemplate to return
         * @param {ApiMailTemplate} apiMailTemplate mailTemplate object that needs to be added to the store
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateMailTemplate: async (mailTemplateId: number, apiMailTemplate: ApiMailTemplate, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'mailTemplateId' is not null or undefined
            assertParamExists('updateMailTemplate', 'mailTemplateId', mailTemplateId)
            // verify required parameter 'apiMailTemplate' is not null or undefined
            assertParamExists('updateMailTemplate', 'apiMailTemplate', apiMailTemplate)
            const localVarPath = `/mailTemplates/{mailTemplateId}`
                .replace(`{${"mailTemplateId"}}`, encodeURIComponent(String(mailTemplateId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = {method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(apiMailTemplate, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * MailTemplateApi - functional programming interface
 * @export
 */
export const MailTemplateApiFp = function (configuration?: Configuration) {
    const localVarAxiosParamCreator = MailTemplateApiAxiosParamCreator(configuration)
    return {
        /**
         *
         * @summary Add a new mailTemplate
         * @param {ApiMailTemplateToAdd} apiMailTemplateToAdd mailTemplate object that needs to be added
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async addMailTemplate(apiMailTemplateToAdd: ApiMailTemplateToAdd, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApiMailTemplateSingle>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.addMailTemplate(apiMailTemplateToAdd, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         *
         * @summary Deletes a mailTemplate
         * @param {number} mailTemplateId mailTemplate id to delete
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteMailTemplate(mailTemplateId: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApiMailTemplateSingle>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteMailTemplate(mailTemplateId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Returns a single mailTemplate
         * @summary Find mailTemplate by ID
         * @param {number} mailTemplateId ID of mailTemplate to return
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getMailTemplateById(mailTemplateId: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApiMailTemplateSingle>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getMailTemplateById(mailTemplateId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         *
         * @summary Update an existing mailTemplate
         * @param {number} mailTemplateId ID of mailTemplate to return
         * @param {ApiMailTemplate} apiMailTemplate mailTemplate object that needs to be added to the store
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateMailTemplate(mailTemplateId: number, apiMailTemplate: ApiMailTemplate, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApiMailTemplateSingle>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateMailTemplate(mailTemplateId, apiMailTemplate, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * MailTemplateApi - factory interface
 * @export
 */
export const MailTemplateApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = MailTemplateApiFp(configuration)
    return {
        /**
         *
         * @summary Add a new mailTemplate
         * @param {ApiMailTemplateToAdd} apiMailTemplateToAdd mailTemplate object that needs to be added
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addMailTemplate(apiMailTemplateToAdd: ApiMailTemplateToAdd, options?: any): AxiosPromise<ApiMailTemplateSingle> {
            return localVarFp.addMailTemplate(apiMailTemplateToAdd, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Deletes a mailTemplate
         * @param {number} mailTemplateId mailTemplate id to delete
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteMailTemplate(mailTemplateId: number, options?: any): AxiosPromise<ApiMailTemplateSingle> {
            return localVarFp.deleteMailTemplate(mailTemplateId, options).then((request) => request(axios, basePath));
        },
        /**
         * Returns a single mailTemplate
         * @summary Find mailTemplate by ID
         * @param {number} mailTemplateId ID of mailTemplate to return
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMailTemplateById(mailTemplateId: number, options?: any): AxiosPromise<ApiMailTemplateSingle> {
            return localVarFp.getMailTemplateById(mailTemplateId, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Update an existing mailTemplate
         * @param {number} mailTemplateId ID of mailTemplate to return
         * @param {ApiMailTemplate} apiMailTemplate mailTemplate object that needs to be added to the store
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateMailTemplate(mailTemplateId: number, apiMailTemplate: ApiMailTemplate, options?: any): AxiosPromise<ApiMailTemplateSingle> {
            return localVarFp.updateMailTemplate(mailTemplateId, apiMailTemplate, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * MailTemplateApi - object-oriented interface
 * @export
 * @class MailTemplateApi
 * @extends {BaseAPI}
 */
export class MailTemplateApi extends BaseAPI {
    /**
     *
     * @summary Add a new mailTemplate
     * @param {ApiMailTemplateToAdd} apiMailTemplateToAdd mailTemplate object that needs to be added
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MailTemplateApi
     */
    public addMailTemplate(apiMailTemplateToAdd: ApiMailTemplateToAdd, options?: any) {
        return MailTemplateApiFp(this.configuration).addMailTemplate(apiMailTemplateToAdd, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     *
     * @summary Deletes a mailTemplate
     * @param {number} mailTemplateId mailTemplate id to delete
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MailTemplateApi
     */
    public deleteMailTemplate(mailTemplateId: number, options?: any) {
        return MailTemplateApiFp(this.configuration).deleteMailTemplate(mailTemplateId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Returns a single mailTemplate
     * @summary Find mailTemplate by ID
     * @param {number} mailTemplateId ID of mailTemplate to return
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MailTemplateApi
     */
    public getMailTemplateById(mailTemplateId: number, options?: any) {
        return MailTemplateApiFp(this.configuration).getMailTemplateById(mailTemplateId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     *
     * @summary Update an existing mailTemplate
     * @param {number} mailTemplateId ID of mailTemplate to return
     * @param {ApiMailTemplate} apiMailTemplate mailTemplate object that needs to be added to the store
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MailTemplateApi
     */
    public updateMailTemplate(mailTemplateId: number, apiMailTemplate: ApiMailTemplate, options?: any) {
        return MailTemplateApiFp(this.configuration).updateMailTemplate(mailTemplateId, apiMailTemplate, options).then((request) => request(this.axios, this.basePath));
    }
}
