/* tslint:disable */
/* eslint-disable */
/**
 * esint_server
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import globalAxios, {AxiosInstance, AxiosPromise} from 'axios';
import {Configuration} from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import {
    assertParamExists,
    createRequestFunction,
    DUMMY_BASE_URL,
    serializeDataIfNeeded,
    setApiKeyToObject,
    setBasicAuthToObject,
    setBearerAuthToObject,
    setOAuthToObject,
    setSearchParams,
    toPathString
} from '../common';
// @ts-ignore
import {BASE_PATH, BaseAPI, COLLECTION_FORMATS, RequestArgs, RequiredError} from '../base';
// @ts-ignore
// @ts-ignore
// @ts-ignore
// @ts-ignore
// @ts-ignore
// @ts-ignore
// @ts-ignore
import {
    ApiOrdererProjectApplication,
    ApiOrdererProjectCancel,
    ApiOrdererProjectChangePrice,
    ApiOrdererProjects,
    ApiOrdererProjectSingle,
    ApiOrdererProjectToAdd,
    ApiProject
} from '../model';
import CONFIG from "../../const/DaoConfig";
/**
 * OrdererProjectsApi - axios parameter creator
 * @export
 */
export const OrdererProjectsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         *
         * @summary Add a new ordererProjects
         * @param {ApiOrdererProjectToAdd} apiOrdererProjectToAdd ordererProject object that needs to be added
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addOrdererProjects: async (apiOrdererProjectToAdd: ApiOrdererProjectToAdd, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'apiOrdererProjectToAdd' is not null or undefined
            assertParamExists('addOrdererProjects', 'apiOrdererProjectToAdd', apiOrdererProjectToAdd)
            const localVarPath = `/mypage/ordererProjects/create`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = {method: 'POST', ...baseOptions, ...options};
            let localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarHeaderParameter = CONFIG().CONFIG_HEADER().headers

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(apiOrdererProjectToAdd, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary cancel a orderProjectApplication
         * @param {ApiOrdererProjectCancel} apiOrdererProjectCancel cancel ordererProjectApplication from orderer
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        cancelOrderProjectApplication: async (apiOrdererProjectCancel: ApiOrdererProjectCancel, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'apiOrdererProjectCancel' is not null or undefined
            assertParamExists('cancelOrderProjectApplication', 'apiOrdererProjectCancel', apiOrdererProjectCancel)
            const localVarPath = `/mypage/ordererProjects/cancel`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = {method: 'PUT', ...baseOptions, ...options};
            let localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarHeaderParameter = CONFIG().CONFIG_HEADER().headers

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(apiOrdererProjectCancel, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Update an existing orderProjectApplication
         * @param {ApiOrdererProjectChangePrice} apiOrdererProjectChangePrice change the price of projectApplication from orderer
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        changePriceOrderProjectApplication: async (apiOrdererProjectChangePrice: ApiOrdererProjectChangePrice, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'apiOrdererProjectChangePrice' is not null or undefined
            assertParamExists('changePriceOrderProjectApplication', 'apiOrdererProjectChangePrice', apiOrdererProjectChangePrice)
            const localVarPath = `/mypage/ordererProjects/changePrice`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = {method: 'PUT', ...baseOptions, ...options};
            let localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarHeaderParameter = CONFIG().CONFIG_HEADER().headers

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(apiOrdererProjectChangePrice, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns a check gmo account
         * @summary check To Logined User Has Gmo Account
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        checkOrdererProjectToAddCheck: async (options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/mypage/ordererProjects/check`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = {method: 'GET', ...baseOptions, ...options};
            let localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarHeaderParameter = CONFIG().CONFIG_HEADER().headers

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Delete a OrdererProject
         * @param {number} projectId projectApplicationId to delete
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteOrdererProject: async (projectId: number, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'projectId' is not null or undefined
            assertParamExists('deleteOrdererProject', 'projectId', projectId)
            const localVarPath = `/mypage/ordererProjects/{projectId}`
                .replace(`{${"projectId"}}`, encodeURIComponent(String(projectId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = {method: 'DELETE', ...baseOptions, ...options};
            let localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarHeaderParameter = CONFIG().CONFIG_HEADER().headers

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Returns ordererProjects 
         * @param {string} [sort] sorting column
         * @param {string} [order] ASC / DESC
         * @param {number} [start] Start position of retrieved data
         * @param {number} [end] End position of retrieved data
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllOrdererProjects: async (sort?: string, order?: string, start?: number, end?: number, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/mypage/ordererProjects`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = {method: 'GET', ...baseOptions, ...options};
            let localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (sort !== undefined) {
                localVarQueryParameter['_sort'] = sort;
            }

            if (order !== undefined) {
                localVarQueryParameter['_order'] = order;
            }

            if (start !== undefined) {
                localVarQueryParameter['_start'] = start;
            }

            if (end !== undefined) {
                localVarQueryParameter['_end'] = end;
            }

            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarHeaderParameter = CONFIG().CONFIG_HEADER().headers

    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns a single ordererProject by projectApplication
         * @summary Find ordererProject by ID
         * @param {number} projectApplicationId ID of ordererProject by contractor to return
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getOrdererProjectByProjectApplicationId: async (projectApplicationId: number, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'projectApplicationId' is not null or undefined
            assertParamExists('getOrdererProjectByProjectApplicationId', 'projectApplicationId', projectApplicationId)
            const localVarPath = `/mypage/ordererProjects/applications/show/{projectApplicationId}`
                .replace(`{${"projectApplicationId"}}`, encodeURIComponent(String(projectApplicationId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = {method: 'GET', ...baseOptions, ...options};
            let localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarHeaderParameter = CONFIG().CONFIG_HEADER().headers

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns a single ordererProject by project
         * @summary Find ordererProject by ID
         * @param {number} projectId ID of ordererProject to return
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getOrdererProjectByProjectId: async (projectId: number, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'projectId' is not null or undefined
            assertParamExists('getOrdererProjectByProjectId', 'projectId', projectId)
            const localVarPath = `/mypage/ordererProjects/show/{projectId}`
                .replace(`{${"projectId"}}`, encodeURIComponent(String(projectId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = {method: 'GET', ...baseOptions, ...options};
            let localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarHeaderParameter = CONFIG().CONFIG_HEADER().headers

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns a ordererProjectToAdd by project
         * @summary Get ordererProjectToAdd by ID
         * @param {number} projectId ID of ordererProject to return
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getOrdererProjectToAddByProjectId: async (projectId: number, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'projectId' is not null or undefined
            assertParamExists('getOrdererProjectToAddByProjectId', 'projectId', projectId)
            const localVarPath = `/mypage/ordererProjects/get/{projectId}`
                .replace(`{${"projectId"}}`, encodeURIComponent(String(projectId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = {method: 'GET', ...baseOptions, ...options};
            let localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarHeaderParameter = CONFIG().CONFIG_HEADER().headers


            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Update an existing ordererProjects
         * @param {number} projectId ID of ordererProjects to return
         * @param {ApiOrdererProjectToAdd} apiOrdererProjectToAdd ordererProject object that needs to be added to the store
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateOrdererProjects: async (projectId: number, apiOrdererProjectToAdd: ApiOrdererProjectToAdd, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'projectId' is not null or undefined
            assertParamExists('updateOrdererProjects', 'projectId', projectId)
            // verify required parameter 'apiOrdererProjectToAdd' is not null or undefined
            assertParamExists('updateOrdererProjects', 'apiOrdererProjectToAdd', apiOrdererProjectToAdd)
            const localVarPath = `/mypage/ordererProjects/edit/{projectId}`
                .replace(`{${"projectId"}}`, encodeURIComponent(String(projectId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = {method: 'PUT', ...baseOptions, ...options};
            let localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarHeaderParameter = CONFIG().CONFIG_HEADER().headers

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(apiOrdererProjectToAdd, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * OrdererProjectsApi - functional programming interface
 * @export
 */
export const OrdererProjectsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = OrdererProjectsApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Add a new ordererProjects
         * @param {ApiOrdererProjectToAdd} apiOrdererProjectToAdd ordererProject object that needs to be added
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async addOrdererProjects(apiOrdererProjectToAdd: ApiOrdererProjectToAdd, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApiOrdererProjectSingle>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.addOrdererProjects(apiOrdererProjectToAdd, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary cancel a orderProjectApplication
         * @param {ApiOrdererProjectCancel} apiOrdererProjectCancel cancel ordererProjectApplication from orderer
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async cancelOrderProjectApplication(apiOrdererProjectCancel: ApiOrdererProjectCancel, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApiOrdererProjectApplication>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.cancelOrderProjectApplication(apiOrdererProjectCancel, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         *
         * @summary Update an existing orderProjectApplication
         * @param {ApiOrdererProjectChangePrice} apiOrdererProjectChangePrice change the price of projectApplication from orderer
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async changePriceOrderProjectApplication(apiOrdererProjectChangePrice: ApiOrdererProjectChangePrice, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApiOrdererProjectApplication>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.changePriceOrderProjectApplication(apiOrdererProjectChangePrice, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Returns a check gmo account
         * @summary check To Logined User Has Gmo Account
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async checkOrdererProjectToAddCheck(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.checkOrdererProjectToAddCheck(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         *
         * @summary Delete a OrdererProject
         * @param {number} projectId projectApplicationId to delete
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteOrdererProject(projectId: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApiProject>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteOrdererProject(projectId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Returns ordererProjects 
         * @param {string} [sort] sorting column
         * @param {string} [order] ASC / DESC
         * @param {number} [start] Start position of retrieved data
         * @param {number} [end] End position of retrieved data
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAllOrdererProjects(sort?: string, order?: string, start?: number, end?: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApiOrdererProjects>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAllOrdererProjects(sort, order, start, end, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Returns a single ordererProject by projectApplication
         * @summary Find ordererProject by ID
         * @param {number} projectApplicationId ID of ordererProject by contractor to return
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getOrdererProjectByProjectApplicationId(projectApplicationId: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApiOrdererProjectApplication>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getOrdererProjectByProjectApplicationId(projectApplicationId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Returns a single ordererProject by project
         * @summary Find ordererProject by ID
         * @param {number} projectId ID of ordererProject to return
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getOrdererProjectByProjectId(projectId: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApiOrdererProjects>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getOrdererProjectByProjectId(projectId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Returns a ordererProjectToAdd by project
         * @summary Get ordererProjectToAdd by ID
         * @param {number} projectId ID of ordererProject to return
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getOrdererProjectToAddByProjectId(projectId: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApiOrdererProjectToAdd>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getOrdererProjectToAddByProjectId(projectId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         *
         * @summary Update an existing ordererProjects
         * @param {number} projectId ID of ordererProjects to return
         * @param {ApiOrdererProjectToAdd} apiOrdererProjectToAdd ordererProject object that needs to be added to the store
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateOrdererProjects(projectId: number, apiOrdererProjectToAdd: ApiOrdererProjectToAdd, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApiOrdererProjectSingle>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateOrdererProjects(projectId, apiOrdererProjectToAdd, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * OrdererProjectsApi - factory interface
 * @export
 */
export const OrdererProjectsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = OrdererProjectsApiFp(configuration)
    return {
        /**
         * 
         * @summary Add a new ordererProjects
         * @param {ApiOrdererProjectToAdd} apiOrdererProjectToAdd ordererProject object that needs to be added
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addOrdererProjects(apiOrdererProjectToAdd: ApiOrdererProjectToAdd, options?: any): AxiosPromise<ApiOrdererProjectSingle> {
            return localVarFp.addOrdererProjects(apiOrdererProjectToAdd, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary cancel a orderProjectApplication
         * @param {ApiOrdererProjectCancel} apiOrdererProjectCancel cancel ordererProjectApplication from orderer
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        cancelOrderProjectApplication(apiOrdererProjectCancel: ApiOrdererProjectCancel, options?: any): AxiosPromise<ApiOrdererProjectApplication> {
            return localVarFp.cancelOrderProjectApplication(apiOrdererProjectCancel, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Update an existing orderProjectApplication
         * @param {ApiOrdererProjectChangePrice} apiOrdererProjectChangePrice change the price of projectApplication from orderer
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        changePriceOrderProjectApplication(apiOrdererProjectChangePrice: ApiOrdererProjectChangePrice, options?: any): AxiosPromise<ApiOrdererProjectApplication> {
            return localVarFp.changePriceOrderProjectApplication(apiOrdererProjectChangePrice, options).then((request) => request(axios, basePath));
        },
        /**
         * Returns a check gmo account
         * @summary check To Logined User Has Gmo Account
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        checkOrdererProjectToAddCheck(options?: any): AxiosPromise<void> {
            return localVarFp.checkOrdererProjectToAddCheck(options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Delete a OrdererProject
         * @param {number} projectId projectApplicationId to delete
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteOrdererProject(projectId: number, options?: any): AxiosPromise<ApiProject> {
            return localVarFp.deleteOrdererProject(projectId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Returns ordererProjects 
         * @param {string} [sort] sorting column
         * @param {string} [order] ASC / DESC
         * @param {number} [start] Start position of retrieved data
         * @param {number} [end] End position of retrieved data
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllOrdererProjects(sort?: string, order?: string, start?: number, end?: number, options?: any): AxiosPromise<ApiOrdererProjects> {
            return localVarFp.getAllOrdererProjects(sort, order, start, end, options).then((request) => request(axios, basePath));
        },
        /**
         * Returns a single ordererProject by projectApplication
         * @summary Find ordererProject by ID
         * @param {number} projectApplicationId ID of ordererProject by contractor to return
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getOrdererProjectByProjectApplicationId(projectApplicationId: number, options?: any): AxiosPromise<ApiOrdererProjectApplication> {
            return localVarFp.getOrdererProjectByProjectApplicationId(projectApplicationId, options).then((request) => request(axios, basePath));
        },
        /**
         * Returns a single ordererProject by project
         * @summary Find ordererProject by ID
         * @param {number} projectId ID of ordererProject to return
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getOrdererProjectByProjectId(projectId: number, options?: any): AxiosPromise<ApiOrdererProjects> {
            return localVarFp.getOrdererProjectByProjectId(projectId, options).then((request) => request(axios, basePath));
        },
        /**
         * Returns a ordererProjectToAdd by project
         * @summary Get ordererProjectToAdd by ID
         * @param {number} projectId ID of ordererProject to return
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getOrdererProjectToAddByProjectId(projectId: number, options?: any): AxiosPromise<ApiOrdererProjectToAdd> {
            return localVarFp.getOrdererProjectToAddByProjectId(projectId, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Update an existing ordererProjects
         * @param {number} projectId ID of ordererProjects to return
         * @param {ApiOrdererProjectToAdd} apiOrdererProjectToAdd ordererProject object that needs to be added to the store
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateOrdererProjects(projectId: number, apiOrdererProjectToAdd: ApiOrdererProjectToAdd, options?: any): AxiosPromise<ApiOrdererProjectSingle> {
            return localVarFp.updateOrdererProjects(projectId, apiOrdererProjectToAdd, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * OrdererProjectsApi - object-oriented interface
 * @export
 * @class OrdererProjectsApi
 * @extends {BaseAPI}
 */
export class OrdererProjectsApi extends BaseAPI {
    /**
     * 
     * @summary Add a new ordererProjects
     * @param {ApiOrdererProjectToAdd} apiOrdererProjectToAdd ordererProject object that needs to be added
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrdererProjectsApi
     */
    public addOrdererProjects(apiOrdererProjectToAdd: ApiOrdererProjectToAdd, options?: any) {
        return OrdererProjectsApiFp(this.configuration).addOrdererProjects(apiOrdererProjectToAdd, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary cancel a orderProjectApplication
     * @param {ApiOrdererProjectCancel} apiOrdererProjectCancel cancel ordererProjectApplication from orderer
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrdererProjectsApi
     */
    public cancelOrderProjectApplication(apiOrdererProjectCancel: ApiOrdererProjectCancel, options?: any) {
        return OrdererProjectsApiFp(this.configuration).cancelOrderProjectApplication(apiOrdererProjectCancel, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     *
     * @summary Update an existing orderProjectApplication
     * @param {ApiOrdererProjectChangePrice} apiOrdererProjectChangePrice change the price of projectApplication from orderer
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrdererProjectsApi
     */
    public changePriceOrderProjectApplication(apiOrdererProjectChangePrice: ApiOrdererProjectChangePrice, options?: any) {
        return OrdererProjectsApiFp(this.configuration).changePriceOrderProjectApplication(apiOrdererProjectChangePrice, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Returns a check gmo account
     * @summary check To Logined User Has Gmo Account
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrdererProjectsApi
     */
    public checkOrdererProjectToAddCheck(options?: any) {
        return OrdererProjectsApiFp(this.configuration).checkOrdererProjectToAddCheck(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     *
     * @summary Delete a OrdererProject
     * @param {number} projectId projectApplicationId to delete
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrdererProjectsApi
     */
    public deleteOrdererProject(projectId: number, options?: any) {
        return OrdererProjectsApiFp(this.configuration).deleteOrdererProject(projectId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Returns ordererProjects 
     * @param {string} [sort] sorting column
     * @param {string} [order] ASC / DESC
     * @param {number} [start] Start position of retrieved data
     * @param {number} [end] End position of retrieved data
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrdererProjectsApi
     */
    public getAllOrdererProjects(sort?: string, order?: string, start?: number, end?: number, options?: any) {
        return OrdererProjectsApiFp(this.configuration).getAllOrdererProjects(sort, order, start, end, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Returns a single ordererProject by projectApplication
     * @summary Find ordererProject by ID
     * @param {number} projectApplicationId ID of ordererProject by contractor to return
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrdererProjectsApi
     */
    public getOrdererProjectByProjectApplicationId(projectApplicationId: number, options?: any) {
        return OrdererProjectsApiFp(this.configuration).getOrdererProjectByProjectApplicationId(projectApplicationId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Returns a single ordererProject by project
     * @summary Find ordererProject by ID
     * @param {number} projectId ID of ordererProject to return
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrdererProjectsApi
     */
    public getOrdererProjectByProjectId(projectId: number, options?: any) {
        return OrdererProjectsApiFp(this.configuration).getOrdererProjectByProjectId(projectId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Returns a ordererProjectToAdd by project
     * @summary Get ordererProjectToAdd by ID
     * @param {number} projectId ID of ordererProject to return
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrdererProjectsApi
     */
    public getOrdererProjectToAddByProjectId(projectId: number, options?: any) {
        return OrdererProjectsApiFp(this.configuration).getOrdererProjectToAddByProjectId(projectId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     *
     * @summary Update an existing ordererProjects
     * @param {number} projectId ID of ordererProjects to return
     * @param {ApiOrdererProjectToAdd} apiOrdererProjectToAdd ordererProject object that needs to be added to the store
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrdererProjectsApi
     */
    public updateOrdererProjects(projectId: number, apiOrdererProjectToAdd: ApiOrdererProjectToAdd, options?: any) {
        return OrdererProjectsApiFp(this.configuration).updateOrdererProjects(projectId, apiOrdererProjectToAdd, options).then((request) => request(this.axios, this.basePath));
    }
}
