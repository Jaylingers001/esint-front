/* tslint:disable */
/* eslint-disable */
/**
 * mtg_server
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import globalAxios, {AxiosInstance, AxiosPromise} from 'axios';
import {Configuration} from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import {
    assertParamExists,
    createRequestFunction,
    DUMMY_BASE_URL,
    serializeDataIfNeeded,
    setApiKeyToObject,
    setBasicAuthToObject,
    setBearerAuthToObject,
    setOAuthToObject,
    setSearchParams,
    toPathString
} from '../common';
// @ts-ignore
import {BASE_PATH, BaseAPI, COLLECTION_FORMATS, RequestArgs, RequiredError} from '../base';
// @ts-ignore
// @ts-ignore
// @ts-ignore
import {ApiBankTransferApplication, ApiBankTransferApplicationSingle, ApiBankTransferApplicationToAdd} from '../model';

/**
 * BankTransferApplicationApi - axios parameter creator
 * @export
 */
export const BankTransferApplicationApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         *
         * @summary Add a new bankTransferApplication
         * @param {ApiBankTransferApplicationToAdd} apiBankTransferApplicationToAdd bankTransferApplication object that needs to be added
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addBankTransferApplication: async (apiBankTransferApplicationToAdd: ApiBankTransferApplicationToAdd, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'apiBankTransferApplicationToAdd' is not null or undefined
            assertParamExists('addBankTransferApplication', 'apiBankTransferApplicationToAdd', apiBankTransferApplicationToAdd)
            const localVarPath = `/bankTransferApplications`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = {method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(apiBankTransferApplicationToAdd, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Deletes a bankTransferApplication
         * @param {number} bankTransferApplicationId bankTransferApplication id to delete
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteBankTransferApplication: async (bankTransferApplicationId: number, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'bankTransferApplicationId' is not null or undefined
            assertParamExists('deleteBankTransferApplication', 'bankTransferApplicationId', bankTransferApplicationId)
            const localVarPath = `/bankTransferApplications/{bankTransferApplicationId}`
                .replace(`{${"bankTransferApplicationId"}}`, encodeURIComponent(String(bankTransferApplicationId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = {method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns a single bankTransferApplication
         * @summary Find bankTransferApplication by ID
         * @param {number} bankTransferApplicationId ID of bankTransferApplication to return
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getBankTransferApplicationById: async (bankTransferApplicationId: number, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'bankTransferApplicationId' is not null or undefined
            assertParamExists('getBankTransferApplicationById', 'bankTransferApplicationId', bankTransferApplicationId)
            const localVarPath = `/bankTransferApplications/{bankTransferApplicationId}`
                .replace(`{${"bankTransferApplicationId"}}`, encodeURIComponent(String(bankTransferApplicationId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = {method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Update an existing bankTransferApplication
         * @param {number} bankTransferApplicationId ID of bankTransferApplication to return
         * @param {ApiBankTransferApplication} apiBankTransferApplication bankTransferApplication object that needs to be added to the store
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateBankTransferApplication: async (bankTransferApplicationId: number, apiBankTransferApplication: ApiBankTransferApplication, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'bankTransferApplicationId' is not null or undefined
            assertParamExists('updateBankTransferApplication', 'bankTransferApplicationId', bankTransferApplicationId)
            // verify required parameter 'apiBankTransferApplication' is not null or undefined
            assertParamExists('updateBankTransferApplication', 'apiBankTransferApplication', apiBankTransferApplication)
            const localVarPath = `/bankTransferApplications/{bankTransferApplicationId}`
                .replace(`{${"bankTransferApplicationId"}}`, encodeURIComponent(String(bankTransferApplicationId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = {method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(apiBankTransferApplication, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * BankTransferApplicationApi - functional programming interface
 * @export
 */
export const BankTransferApplicationApiFp = function (configuration?: Configuration) {
    const localVarAxiosParamCreator = BankTransferApplicationApiAxiosParamCreator(configuration)
    return {
        /**
         *
         * @summary Add a new bankTransferApplication
         * @param {ApiBankTransferApplicationToAdd} apiBankTransferApplicationToAdd bankTransferApplication object that needs to be added
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async addBankTransferApplication(apiBankTransferApplicationToAdd: ApiBankTransferApplicationToAdd, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApiBankTransferApplicationSingle>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.addBankTransferApplication(apiBankTransferApplicationToAdd, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         *
         * @summary Deletes a bankTransferApplication
         * @param {number} bankTransferApplicationId bankTransferApplication id to delete
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteBankTransferApplication(bankTransferApplicationId: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApiBankTransferApplicationSingle>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteBankTransferApplication(bankTransferApplicationId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Returns a single bankTransferApplication
         * @summary Find bankTransferApplication by ID
         * @param {number} bankTransferApplicationId ID of bankTransferApplication to return
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getBankTransferApplicationById(bankTransferApplicationId: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApiBankTransferApplicationSingle>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getBankTransferApplicationById(bankTransferApplicationId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         *
         * @summary Update an existing bankTransferApplication
         * @param {number} bankTransferApplicationId ID of bankTransferApplication to return
         * @param {ApiBankTransferApplication} apiBankTransferApplication bankTransferApplication object that needs to be added to the store
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateBankTransferApplication(bankTransferApplicationId: number, apiBankTransferApplication: ApiBankTransferApplication, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApiBankTransferApplicationSingle>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateBankTransferApplication(bankTransferApplicationId, apiBankTransferApplication, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * BankTransferApplicationApi - factory interface
 * @export
 */
export const BankTransferApplicationApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = BankTransferApplicationApiFp(configuration)
    return {
        /**
         *
         * @summary Add a new bankTransferApplication
         * @param {ApiBankTransferApplicationToAdd} apiBankTransferApplicationToAdd bankTransferApplication object that needs to be added
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addBankTransferApplication(apiBankTransferApplicationToAdd: ApiBankTransferApplicationToAdd, options?: any): AxiosPromise<ApiBankTransferApplicationSingle> {
            return localVarFp.addBankTransferApplication(apiBankTransferApplicationToAdd, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Deletes a bankTransferApplication
         * @param {number} bankTransferApplicationId bankTransferApplication id to delete
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteBankTransferApplication(bankTransferApplicationId: number, options?: any): AxiosPromise<ApiBankTransferApplicationSingle> {
            return localVarFp.deleteBankTransferApplication(bankTransferApplicationId, options).then((request) => request(axios, basePath));
        },
        /**
         * Returns a single bankTransferApplication
         * @summary Find bankTransferApplication by ID
         * @param {number} bankTransferApplicationId ID of bankTransferApplication to return
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getBankTransferApplicationById(bankTransferApplicationId: number, options?: any): AxiosPromise<ApiBankTransferApplicationSingle> {
            return localVarFp.getBankTransferApplicationById(bankTransferApplicationId, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Update an existing bankTransferApplication
         * @param {number} bankTransferApplicationId ID of bankTransferApplication to return
         * @param {ApiBankTransferApplication} apiBankTransferApplication bankTransferApplication object that needs to be added to the store
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateBankTransferApplication(bankTransferApplicationId: number, apiBankTransferApplication: ApiBankTransferApplication, options?: any): AxiosPromise<ApiBankTransferApplicationSingle> {
            return localVarFp.updateBankTransferApplication(bankTransferApplicationId, apiBankTransferApplication, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * BankTransferApplicationApi - object-oriented interface
 * @export
 * @class BankTransferApplicationApi
 * @extends {BaseAPI}
 */
export class BankTransferApplicationApi extends BaseAPI {
    /**
     *
     * @summary Add a new bankTransferApplication
     * @param {ApiBankTransferApplicationToAdd} apiBankTransferApplicationToAdd bankTransferApplication object that needs to be added
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BankTransferApplicationApi
     */
    public addBankTransferApplication(apiBankTransferApplicationToAdd: ApiBankTransferApplicationToAdd, options?: any) {
        return BankTransferApplicationApiFp(this.configuration).addBankTransferApplication(apiBankTransferApplicationToAdd, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     *
     * @summary Deletes a bankTransferApplication
     * @param {number} bankTransferApplicationId bankTransferApplication id to delete
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BankTransferApplicationApi
     */
    public deleteBankTransferApplication(bankTransferApplicationId: number, options?: any) {
        return BankTransferApplicationApiFp(this.configuration).deleteBankTransferApplication(bankTransferApplicationId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Returns a single bankTransferApplication
     * @summary Find bankTransferApplication by ID
     * @param {number} bankTransferApplicationId ID of bankTransferApplication to return
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BankTransferApplicationApi
     */
    public getBankTransferApplicationById(bankTransferApplicationId: number, options?: any) {
        return BankTransferApplicationApiFp(this.configuration).getBankTransferApplicationById(bankTransferApplicationId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     *
     * @summary Update an existing bankTransferApplication
     * @param {number} bankTransferApplicationId ID of bankTransferApplication to return
     * @param {ApiBankTransferApplication} apiBankTransferApplication bankTransferApplication object that needs to be added to the store
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BankTransferApplicationApi
     */
    public updateBankTransferApplication(bankTransferApplicationId: number, apiBankTransferApplication: ApiBankTransferApplication, options?: any) {
        return BankTransferApplicationApiFp(this.configuration).updateBankTransferApplication(bankTransferApplicationId, apiBankTransferApplication, options).then((request) => request(this.axios, this.basePath));
    }
}
