/* tslint:disable */
/* eslint-disable */
/**
 * mtg_server
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import globalAxios, {AxiosInstance, AxiosPromise} from 'axios';
import {Configuration} from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import {
    assertParamExists,
    createRequestFunction,
    DUMMY_BASE_URL,
    serializeDataIfNeeded,
    setApiKeyToObject,
    setBasicAuthToObject,
    setBearerAuthToObject,
    setOAuthToObject,
    setSearchParams,
    toPathString
} from '../common';
// @ts-ignore
import {BASE_PATH, BaseAPI, COLLECTION_FORMATS, RequestArgs, RequiredError} from '../base';
// @ts-ignore
// @ts-ignore
// @ts-ignore
import {ApiMessage, ApiMessageSingle, ApiMessageToAdd} from '../model';

/**
 * MessageApi - axios parameter creator
 * @export
 */
export const MessageApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         *
         * @summary Add a new message
         * @param {ApiMessageToAdd} apiMessageToAdd message object that needs to be added
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addMessage: async (apiMessageToAdd: ApiMessageToAdd, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'apiMessageToAdd' is not null or undefined
            assertParamExists('addMessage', 'apiMessageToAdd', apiMessageToAdd)
            const localVarPath = `/messages`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = {method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(apiMessageToAdd, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Deletes a message
         * @param {number} messageId message id to delete
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteMessage: async (messageId: number, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'messageId' is not null or undefined
            assertParamExists('deleteMessage', 'messageId', messageId)
            const localVarPath = `/messages/{messageId}`
                .replace(`{${"messageId"}}`, encodeURIComponent(String(messageId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = {method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns a single message
         * @summary Find message by ID
         * @param {number} messageId ID of message to return
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMessageById: async (messageId: number, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'messageId' is not null or undefined
            assertParamExists('getMessageById', 'messageId', messageId)
            const localVarPath = `/messages/{messageId}`
                .replace(`{${"messageId"}}`, encodeURIComponent(String(messageId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = {method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Update an existing message
         * @param {number} messageId ID of message to return
         * @param {ApiMessage} apiMessage message object that needs to be added to the store
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateMessage: async (messageId: number, apiMessage: ApiMessage, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'messageId' is not null or undefined
            assertParamExists('updateMessage', 'messageId', messageId)
            // verify required parameter 'apiMessage' is not null or undefined
            assertParamExists('updateMessage', 'apiMessage', apiMessage)
            const localVarPath = `/messages/{messageId}`
                .replace(`{${"messageId"}}`, encodeURIComponent(String(messageId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = {method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(apiMessage, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * MessageApi - functional programming interface
 * @export
 */
export const MessageApiFp = function (configuration?: Configuration) {
    const localVarAxiosParamCreator = MessageApiAxiosParamCreator(configuration)
    return {
        /**
         *
         * @summary Add a new message
         * @param {ApiMessageToAdd} apiMessageToAdd message object that needs to be added
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async addMessage(apiMessageToAdd: ApiMessageToAdd, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApiMessageSingle>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.addMessage(apiMessageToAdd, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         *
         * @summary Deletes a message
         * @param {number} messageId message id to delete
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteMessage(messageId: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApiMessageSingle>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteMessage(messageId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Returns a single message
         * @summary Find message by ID
         * @param {number} messageId ID of message to return
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getMessageById(messageId: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApiMessageSingle>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getMessageById(messageId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         *
         * @summary Update an existing message
         * @param {number} messageId ID of message to return
         * @param {ApiMessage} apiMessage message object that needs to be added to the store
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateMessage(messageId: number, apiMessage: ApiMessage, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApiMessageSingle>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateMessage(messageId, apiMessage, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * MessageApi - factory interface
 * @export
 */
export const MessageApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = MessageApiFp(configuration)
    return {
        /**
         *
         * @summary Add a new message
         * @param {ApiMessageToAdd} apiMessageToAdd message object that needs to be added
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addMessage(apiMessageToAdd: ApiMessageToAdd, options?: any): AxiosPromise<ApiMessageSingle> {
            return localVarFp.addMessage(apiMessageToAdd, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Deletes a message
         * @param {number} messageId message id to delete
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteMessage(messageId: number, options?: any): AxiosPromise<ApiMessageSingle> {
            return localVarFp.deleteMessage(messageId, options).then((request) => request(axios, basePath));
        },
        /**
         * Returns a single message
         * @summary Find message by ID
         * @param {number} messageId ID of message to return
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMessageById(messageId: number, options?: any): AxiosPromise<ApiMessageSingle> {
            return localVarFp.getMessageById(messageId, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Update an existing message
         * @param {number} messageId ID of message to return
         * @param {ApiMessage} apiMessage message object that needs to be added to the store
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateMessage(messageId: number, apiMessage: ApiMessage, options?: any): AxiosPromise<ApiMessageSingle> {
            return localVarFp.updateMessage(messageId, apiMessage, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * MessageApi - object-oriented interface
 * @export
 * @class MessageApi
 * @extends {BaseAPI}
 */
export class MessageApi extends BaseAPI {
    /**
     *
     * @summary Add a new message
     * @param {ApiMessageToAdd} apiMessageToAdd message object that needs to be added
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MessageApi
     */
    public addMessage(apiMessageToAdd: ApiMessageToAdd, options?: any) {
        return MessageApiFp(this.configuration).addMessage(apiMessageToAdd, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     *
     * @summary Deletes a message
     * @param {number} messageId message id to delete
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MessageApi
     */
    public deleteMessage(messageId: number, options?: any) {
        return MessageApiFp(this.configuration).deleteMessage(messageId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Returns a single message
     * @summary Find message by ID
     * @param {number} messageId ID of message to return
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MessageApi
     */
    public getMessageById(messageId: number, options?: any) {
        return MessageApiFp(this.configuration).getMessageById(messageId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     *
     * @summary Update an existing message
     * @param {number} messageId ID of message to return
     * @param {ApiMessage} apiMessage message object that needs to be added to the store
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MessageApi
     */
    public updateMessage(messageId: number, apiMessage: ApiMessage, options?: any) {
        return MessageApiFp(this.configuration).updateMessage(messageId, apiMessage, options).then((request) => request(this.axios, this.basePath));
    }
}
