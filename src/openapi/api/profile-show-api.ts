/* tslint:disable */
/* eslint-disable */
/**
 * mtg_server
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import globalAxios, {AxiosInstance, AxiosPromise} from 'axios';
import {Configuration} from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import {
    assertParamExists,
    createRequestFunction,
    DUMMY_BASE_URL,
    serializeDataIfNeeded,
    setApiKeyToObject,
    setBasicAuthToObject,
    setBearerAuthToObject,
    setOAuthToObject,
    setSearchParams,
    toPathString
} from '../common';
// @ts-ignore
import {BASE_PATH, BaseAPI, COLLECTION_FORMATS, RequestArgs, RequiredError} from '../base';
// @ts-ignore
import {ApiUserProfileShow} from '../model';

/**
 * ProfileShowApi - axios parameter creator
 * @export
 */
export const ProfileShowApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Returns a single UserProfile
         * @summary Find Profile by ID
         * @param {number} userId ID of user to return
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getProfileById: async (userId: number, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'userId' is not null or undefined
            assertParamExists('getProfileById', 'userId', userId)
            const localVarPath = `/profile/show/{userId}`
                .replace(`{${"userId"}}`, encodeURIComponent(String(userId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = {method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ProfileShowApi - functional programming interface
 * @export
 */
export const ProfileShowApiFp = function (configuration?: Configuration) {
    const localVarAxiosParamCreator = ProfileShowApiAxiosParamCreator(configuration)
    return {
        /**
         * Returns a single UserProfile
         * @summary Find Profile by ID
         * @param {number} userId ID of user to return
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getProfileById(userId: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApiUserProfileShow>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getProfileById(userId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * ProfileShowApi - factory interface
 * @export
 */
export const ProfileShowApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ProfileShowApiFp(configuration)
    return {
        /**
         * Returns a single UserProfile
         * @summary Find Profile by ID
         * @param {number} userId ID of user to return
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getProfileById(userId: number, options?: any): AxiosPromise<ApiUserProfileShow> {
            return localVarFp.getProfileById(userId, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ProfileShowApi - object-oriented interface
 * @export
 * @class ProfileShowApi
 * @extends {BaseAPI}
 */
export class ProfileShowApi extends BaseAPI {
    /**
     * Returns a single UserProfile
     * @summary Find Profile by ID
     * @param {number} userId ID of user to return
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProfileShowApi
     */
    public getProfileById(userId: number, options?: any) {
        return ProfileShowApiFp(this.configuration).getProfileById(userId, options).then((request) => request(this.axios, this.basePath));
    }
}
