/* tslint:disable */
/* eslint-disable */
/**
 * mtg_server
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import globalAxios, {AxiosInstance, AxiosPromise} from 'axios';
import {Configuration} from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import {
    assertParamExists,
    createRequestFunction,
    DUMMY_BASE_URL,
    serializeDataIfNeeded,
    setApiKeyToObject,
    setBasicAuthToObject,
    setBearerAuthToObject,
    setOAuthToObject,
    setSearchParams,
    toPathString
} from '../common';
// @ts-ignore
import {BASE_PATH, BaseAPI, COLLECTION_FORMATS, RequestArgs, RequiredError} from '../base';
// @ts-ignore
// @ts-ignore
// @ts-ignore
import {ApiCoupon, ApiCouponSingle, ApiCouponToAdd} from '../model';

/**
 * CouponApi - axios parameter creator
 * @export
 */
export const CouponApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         *
         * @summary Add a new Coupon
         * @param {ApiCouponToAdd} apiCouponToAdd Coupon object that needs to be added
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addCoupon: async (apiCouponToAdd: ApiCouponToAdd, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'apiCouponToAdd' is not null or undefined
            assertParamExists('addCoupon', 'apiCouponToAdd', apiCouponToAdd)
            const localVarPath = `/coupons`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = {method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(apiCouponToAdd, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Deletes a coupon
         * @param {number} couponId Coupon id to delete
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteCoupon: async (couponId: number, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'couponId' is not null or undefined
            assertParamExists('deleteCoupon', 'couponId', couponId)
            const localVarPath = `/coupons/{couponId}`
                .replace(`{${"couponId"}}`, encodeURIComponent(String(couponId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = {method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns a single coupon
         * @summary Find Coupon by ID
         * @param {number} couponId ID of coupon to return
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCouponById: async (couponId: number, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'couponId' is not null or undefined
            assertParamExists('getCouponById', 'couponId', couponId)
            const localVarPath = `/coupons/{couponId}`
                .replace(`{${"couponId"}}`, encodeURIComponent(String(couponId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = {method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Update an existing Coupon
         * @param {number} couponId ID of coupon to return
         * @param {ApiCoupon} apiCoupon Coupon object that needs to be added to the store
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateCoupon: async (couponId: number, apiCoupon: ApiCoupon, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'couponId' is not null or undefined
            assertParamExists('updateCoupon', 'couponId', couponId)
            // verify required parameter 'apiCoupon' is not null or undefined
            assertParamExists('updateCoupon', 'apiCoupon', apiCoupon)
            const localVarPath = `/coupons/{couponId}`
                .replace(`{${"couponId"}}`, encodeURIComponent(String(couponId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = {method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(apiCoupon, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * CouponApi - functional programming interface
 * @export
 */
export const CouponApiFp = function (configuration?: Configuration) {
    const localVarAxiosParamCreator = CouponApiAxiosParamCreator(configuration)
    return {
        /**
         *
         * @summary Add a new Coupon
         * @param {ApiCouponToAdd} apiCouponToAdd Coupon object that needs to be added
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async addCoupon(apiCouponToAdd: ApiCouponToAdd, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApiCouponSingle>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.addCoupon(apiCouponToAdd, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         *
         * @summary Deletes a coupon
         * @param {number} couponId Coupon id to delete
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteCoupon(couponId: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApiCouponSingle>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteCoupon(couponId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Returns a single coupon
         * @summary Find Coupon by ID
         * @param {number} couponId ID of coupon to return
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getCouponById(couponId: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApiCouponSingle>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getCouponById(couponId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         *
         * @summary Update an existing Coupon
         * @param {number} couponId ID of coupon to return
         * @param {ApiCoupon} apiCoupon Coupon object that needs to be added to the store
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateCoupon(couponId: number, apiCoupon: ApiCoupon, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApiCouponSingle>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateCoupon(couponId, apiCoupon, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * CouponApi - factory interface
 * @export
 */
export const CouponApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = CouponApiFp(configuration)
    return {
        /**
         *
         * @summary Add a new Coupon
         * @param {ApiCouponToAdd} apiCouponToAdd Coupon object that needs to be added
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addCoupon(apiCouponToAdd: ApiCouponToAdd, options?: any): AxiosPromise<ApiCouponSingle> {
            return localVarFp.addCoupon(apiCouponToAdd, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Deletes a coupon
         * @param {number} couponId Coupon id to delete
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteCoupon(couponId: number, options?: any): AxiosPromise<ApiCouponSingle> {
            return localVarFp.deleteCoupon(couponId, options).then((request) => request(axios, basePath));
        },
        /**
         * Returns a single coupon
         * @summary Find Coupon by ID
         * @param {number} couponId ID of coupon to return
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCouponById(couponId: number, options?: any): AxiosPromise<ApiCouponSingle> {
            return localVarFp.getCouponById(couponId, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Update an existing Coupon
         * @param {number} couponId ID of coupon to return
         * @param {ApiCoupon} apiCoupon Coupon object that needs to be added to the store
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateCoupon(couponId: number, apiCoupon: ApiCoupon, options?: any): AxiosPromise<ApiCouponSingle> {
            return localVarFp.updateCoupon(couponId, apiCoupon, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * CouponApi - object-oriented interface
 * @export
 * @class CouponApi
 * @extends {BaseAPI}
 */
export class CouponApi extends BaseAPI {
    /**
     *
     * @summary Add a new Coupon
     * @param {ApiCouponToAdd} apiCouponToAdd Coupon object that needs to be added
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CouponApi
     */
    public addCoupon(apiCouponToAdd: ApiCouponToAdd, options?: any) {
        return CouponApiFp(this.configuration).addCoupon(apiCouponToAdd, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     *
     * @summary Deletes a coupon
     * @param {number} couponId Coupon id to delete
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CouponApi
     */
    public deleteCoupon(couponId: number, options?: any) {
        return CouponApiFp(this.configuration).deleteCoupon(couponId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Returns a single coupon
     * @summary Find Coupon by ID
     * @param {number} couponId ID of coupon to return
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CouponApi
     */
    public getCouponById(couponId: number, options?: any) {
        return CouponApiFp(this.configuration).getCouponById(couponId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     *
     * @summary Update an existing Coupon
     * @param {number} couponId ID of coupon to return
     * @param {ApiCoupon} apiCoupon Coupon object that needs to be added to the store
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CouponApi
     */
    public updateCoupon(couponId: number, apiCoupon: ApiCoupon, options?: any) {
        return CouponApiFp(this.configuration).updateCoupon(couponId, apiCoupon, options).then((request) => request(this.axios, this.basePath));
    }
}
