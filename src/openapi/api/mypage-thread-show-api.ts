/* tslint:disable */
/* eslint-disable */
/**
 * esint_server
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import globalAxios, {AxiosPromise, AxiosInstance} from 'axios';
import {Configuration} from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import {
    assertParamExists,
    createRequestFunction,
    DUMMY_BASE_URL,
    serializeDataIfNeeded,
    setApiKeyToObject,
    setBasicAuthToObject,
    setBearerAuthToObject,
    setOAuthToObject,
    setSearchParams,
    toPathString
} from '../common';
// @ts-ignore
import {BASE_PATH, BaseAPI, COLLECTION_FORMATS, RequestArgs, RequiredError} from '../base';
// @ts-ignore
// @ts-ignore
import {ApiMypageThreadShows, ApiMypageThreadShowToAdd} from '../model';
// @ts-ignore
import {ApiMypageThreadShowToAdd} from '../model';
// @ts-ignore
import {ApiMypageThreadShows} from '../model';

/**
 * MypageThreadShowApi - axios parameter creator
 * @export
 */
export const MypageThreadShowApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         *
         * @summary Add a new mypageThreadShow
         * @param {number} projectApplicationId projectApplication id to thread show
         * @param {ApiMypageThreadShowToAdd} apiMypageThreadShowToAdd mypage thread show object that needs to be added
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addMypageThreadShow: async (projectApplicationId: number, apiMypageThreadShowToAdd: ApiMypageThreadShowToAdd, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'projectApplicationId' is not null or undefined
            assertParamExists('addMypageThreadShow', 'projectApplicationId', projectApplicationId)
            // verify required parameter 'apiMypageThreadShowToAdd' is not null or undefined
            assertParamExists('addMypageThreadShow', 'apiMypageThreadShowToAdd', apiMypageThreadShowToAdd)
            const localVarPath = `/mypage/threads/show/{projectApplicationId}`
                .replace(`{${"projectApplicationId"}}`, encodeURIComponent(String(projectApplicationId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = {method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(apiMypageThreadShowToAdd, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Returns mypageThreadShow
         * @param {number} projectApplicationId projectApplication id to thread show
         * @param {string} [sort] sorting column
         * @param {string} [order] ASC / DESC
         * @param {number} [start] Start position of retrieved data
         * @param {number} [end] End position of retrieved data
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllMypageThreadShow: async (projectApplicationId: number, sort?: string, order?: string, start?: number, end?: number, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'projectApplicationId' is not null or undefined
            assertParamExists('getAllMypageThreadShow', 'projectApplicationId', projectApplicationId)
            const localVarPath = `/mypage/threads/show/{projectApplicationId}`
                .replace(`{${"projectApplicationId"}}`, encodeURIComponent(String(projectApplicationId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = {method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (sort !== undefined) {
                localVarQueryParameter['_sort'] = sort;
            }

            if (order !== undefined) {
                localVarQueryParameter['_order'] = order;
            }

            if (start !== undefined) {
                localVarQueryParameter['_start'] = start;
            }

            if (end !== undefined) {
                localVarQueryParameter['_end'] = end;
            }


            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * MypageThreadShowApi - functional programming interface
 * @export
 */
export const MypageThreadShowApiFp = function (configuration?: Configuration) {
    const localVarAxiosParamCreator = MypageThreadShowApiAxiosParamCreator(configuration)
    return {
        /**
         *
         * @summary Add a new mypageThreadShow
         * @param {number} projectApplicationId projectApplication id to thread show
         * @param {ApiMypageThreadShowToAdd} apiMypageThreadShowToAdd mypage thread show object that needs to be added
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async addMypageThreadShow(projectApplicationId: number, apiMypageThreadShowToAdd: ApiMypageThreadShowToAdd, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApiMypageThreadShows>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.addMypageThreadShow(projectApplicationId, apiMypageThreadShowToAdd, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         *
         * @summary Returns mypageThreadShow
         * @param {number} projectApplicationId projectApplication id to thread show
         * @param {string} [sort] sorting column
         * @param {string} [order] ASC / DESC
         * @param {number} [start] Start position of retrieved data
         * @param {number} [end] End position of retrieved data
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAllMypageThreadShow(projectApplicationId: number, sort?: string, order?: string, start?: number, end?: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApiMypageThreadShows>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAllMypageThreadShow(projectApplicationId, sort, order, start, end, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * MypageThreadShowApi - factory interface
 * @export
 */
export const MypageThreadShowApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = MypageThreadShowApiFp(configuration)
    return {
        /**
         *
         * @summary Add a new mypageThreadShow
         * @param {number} projectApplicationId projectApplication id to thread show
         * @param {ApiMypageThreadShowToAdd} apiMypageThreadShowToAdd mypage thread show object that needs to be added
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addMypageThreadShow(projectApplicationId: number, apiMypageThreadShowToAdd: ApiMypageThreadShowToAdd, options?: any): AxiosPromise<ApiMypageThreadShows> {
            return localVarFp.addMypageThreadShow(projectApplicationId, apiMypageThreadShowToAdd, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Returns mypageThreadShow
         * @param {number} projectApplicationId projectApplication id to thread show
         * @param {string} [sort] sorting column
         * @param {string} [order] ASC / DESC
         * @param {number} [start] Start position of retrieved data
         * @param {number} [end] End position of retrieved data
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllMypageThreadShow(projectApplicationId: number, sort?: string, order?: string, start?: number, end?: number, options?: any): AxiosPromise<ApiMypageThreadShows> {
            return localVarFp.getAllMypageThreadShow(projectApplicationId, sort, order, start, end, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * MypageThreadShowApi - object-oriented interface
 * @export
 * @class MypageThreadShowApi
 * @extends {BaseAPI}
 */
export class MypageThreadShowApi extends BaseAPI {
    /**
     *
     * @summary Add a new mypageThreadShow
     * @param {number} projectApplicationId projectApplication id to thread show
     * @param {ApiMypageThreadShowToAdd} apiMypageThreadShowToAdd mypage thread show object that needs to be added
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MypageThreadShowApi
     */
    public addMypageThreadShow(projectApplicationId: number, apiMypageThreadShowToAdd: ApiMypageThreadShowToAdd, options?: any) {
        return MypageThreadShowApiFp(this.configuration).addMypageThreadShow(projectApplicationId, apiMypageThreadShowToAdd, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     *
     * @summary Returns mypageThreadShow
     * @param {number} projectApplicationId projectApplication id to thread show
     * @param {string} [sort] sorting column
     * @param {string} [order] ASC / DESC
     * @param {number} [start] Start position of retrieved data
     * @param {number} [end] End position of retrieved data
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MypageThreadShowApi
     */
    public getAllMypageThreadShow(projectApplicationId: number, sort?: string, order?: string, start?: number, end?: number, options?: any) {
        return MypageThreadShowApiFp(this.configuration).getAllMypageThreadShow(projectApplicationId, sort, order, start, end, options).then((request) => request(this.axios, this.basePath));
    }
}
