/* tslint:disable */
/* eslint-disable */
/**
 * esint_server
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import globalAxios, { AxiosPromise, AxiosInstance } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { ApiUserRecommendProject } from '../model';
// @ts-ignore
import { ApiUserRecommendProjectSingle } from '../model';
// @ts-ignore
import { ApiUserRecommendProjectToAdd } from '../model';
// @ts-ignore
import { ApiUserRecommendProjectToSearch } from '../model';
// @ts-ignore
import { ApiUserRecommendProjects } from '../model';
/**
 * UserRecommendProjectsApi - axios parameter creator
 * @export
 */
export const UserRecommendProjectsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Add a new userRecommendProject
         * @param {ApiUserRecommendProjectToAdd} apiUserRecommendProjectToAdd userRecommendProject object that needs to be added
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addUserRecommendProject: async (apiUserRecommendProjectToAdd: ApiUserRecommendProjectToAdd, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'apiUserRecommendProjectToAdd' is not null or undefined
            assertParamExists('addUserRecommendProject', 'apiUserRecommendProjectToAdd', apiUserRecommendProjectToAdd)
            const localVarPath = `/admin/userRecommendProjects`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(apiUserRecommendProjectToAdd, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Deletes a userRecommendProject
         * @param {number} userRecommendProjectId userRecommendProject id to delete
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteUserRecommendProject: async (userRecommendProjectId: number, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'userRecommendProjectId' is not null or undefined
            assertParamExists('deleteUserRecommendProject', 'userRecommendProjectId', userRecommendProjectId)
            const localVarPath = `/admin/userRecommendProjects/{userRecommendProjectId}`
                .replace(`{${"userRecommendProjectId"}}`, encodeURIComponent(String(userRecommendProjectId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Returns userRecommendProjects 
         * @param {ApiUserRecommendProjectToSearch} [filter] 
         * @param {string} [sort] sorting column
         * @param {string} [order] ASC / DESC
         * @param {number} [start] Start position of retrieved data
         * @param {number} [end] End position of retrieved data
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllUserRecommendProjects: async (filter?: ApiUserRecommendProjectToSearch, sort?: string, order?: string, start?: number, end?: number, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/admin/userRecommendProjects`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (filter !== undefined) {
                localVarQueryParameter['_filter'] = filter;
            }

            if (sort !== undefined) {
                localVarQueryParameter['_sort'] = sort;
            }

            if (order !== undefined) {
                localVarQueryParameter['_order'] = order;
            }

            if (start !== undefined) {
                localVarQueryParameter['_start'] = start;
            }

            if (end !== undefined) {
                localVarQueryParameter['_end'] = end;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns a single userRecommendProject
         * @summary Find userRecommendProject by ID
         * @param {number} userRecommendProjectId ID of userRecommendProject to return
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUserRecommendProjectById: async (userRecommendProjectId: number, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'userRecommendProjectId' is not null or undefined
            assertParamExists('getUserRecommendProjectById', 'userRecommendProjectId', userRecommendProjectId)
            const localVarPath = `/admin/userRecommendProjects/{userRecommendProjectId}`
                .replace(`{${"userRecommendProjectId"}}`, encodeURIComponent(String(userRecommendProjectId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Update an existing userRecommendProject
         * @param {number} userRecommendProjectId ID of userRecommendProject to return
         * @param {ApiUserRecommendProject} apiUserRecommendProject userRecommendProject object that needs to be added to the store
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateUserRecommendProject: async (userRecommendProjectId: number, apiUserRecommendProject: ApiUserRecommendProject, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'userRecommendProjectId' is not null or undefined
            assertParamExists('updateUserRecommendProject', 'userRecommendProjectId', userRecommendProjectId)
            // verify required parameter 'apiUserRecommendProject' is not null or undefined
            assertParamExists('updateUserRecommendProject', 'apiUserRecommendProject', apiUserRecommendProject)
            const localVarPath = `/admin/userRecommendProjects/{userRecommendProjectId}`
                .replace(`{${"userRecommendProjectId"}}`, encodeURIComponent(String(userRecommendProjectId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(apiUserRecommendProject, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * UserRecommendProjectsApi - functional programming interface
 * @export
 */
export const UserRecommendProjectsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = UserRecommendProjectsApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Add a new userRecommendProject
         * @param {ApiUserRecommendProjectToAdd} apiUserRecommendProjectToAdd userRecommendProject object that needs to be added
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async addUserRecommendProject(apiUserRecommendProjectToAdd: ApiUserRecommendProjectToAdd, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApiUserRecommendProjectSingle>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.addUserRecommendProject(apiUserRecommendProjectToAdd, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Deletes a userRecommendProject
         * @param {number} userRecommendProjectId userRecommendProject id to delete
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteUserRecommendProject(userRecommendProjectId: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApiUserRecommendProjectSingle>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteUserRecommendProject(userRecommendProjectId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Returns userRecommendProjects 
         * @param {ApiUserRecommendProjectToSearch} [filter] 
         * @param {string} [sort] sorting column
         * @param {string} [order] ASC / DESC
         * @param {number} [start] Start position of retrieved data
         * @param {number} [end] End position of retrieved data
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAllUserRecommendProjects(filter?: ApiUserRecommendProjectToSearch, sort?: string, order?: string, start?: number, end?: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApiUserRecommendProjects>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAllUserRecommendProjects(filter, sort, order, start, end, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Returns a single userRecommendProject
         * @summary Find userRecommendProject by ID
         * @param {number} userRecommendProjectId ID of userRecommendProject to return
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getUserRecommendProjectById(userRecommendProjectId: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApiUserRecommendProjectSingle>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getUserRecommendProjectById(userRecommendProjectId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Update an existing userRecommendProject
         * @param {number} userRecommendProjectId ID of userRecommendProject to return
         * @param {ApiUserRecommendProject} apiUserRecommendProject userRecommendProject object that needs to be added to the store
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateUserRecommendProject(userRecommendProjectId: number, apiUserRecommendProject: ApiUserRecommendProject, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApiUserRecommendProjectSingle>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateUserRecommendProject(userRecommendProjectId, apiUserRecommendProject, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * UserRecommendProjectsApi - factory interface
 * @export
 */
export const UserRecommendProjectsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = UserRecommendProjectsApiFp(configuration)
    return {
        /**
         * 
         * @summary Add a new userRecommendProject
         * @param {ApiUserRecommendProjectToAdd} apiUserRecommendProjectToAdd userRecommendProject object that needs to be added
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addUserRecommendProject(apiUserRecommendProjectToAdd: ApiUserRecommendProjectToAdd, options?: any): AxiosPromise<ApiUserRecommendProjectSingle> {
            return localVarFp.addUserRecommendProject(apiUserRecommendProjectToAdd, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Deletes a userRecommendProject
         * @param {number} userRecommendProjectId userRecommendProject id to delete
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteUserRecommendProject(userRecommendProjectId: number, options?: any): AxiosPromise<ApiUserRecommendProjectSingle> {
            return localVarFp.deleteUserRecommendProject(userRecommendProjectId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Returns userRecommendProjects 
         * @param {ApiUserRecommendProjectToSearch} [filter] 
         * @param {string} [sort] sorting column
         * @param {string} [order] ASC / DESC
         * @param {number} [start] Start position of retrieved data
         * @param {number} [end] End position of retrieved data
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllUserRecommendProjects(filter?: ApiUserRecommendProjectToSearch, sort?: string, order?: string, start?: number, end?: number, options?: any): AxiosPromise<ApiUserRecommendProjects> {
            return localVarFp.getAllUserRecommendProjects(filter, sort, order, start, end, options).then((request) => request(axios, basePath));
        },
        /**
         * Returns a single userRecommendProject
         * @summary Find userRecommendProject by ID
         * @param {number} userRecommendProjectId ID of userRecommendProject to return
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUserRecommendProjectById(userRecommendProjectId: number, options?: any): AxiosPromise<ApiUserRecommendProjectSingle> {
            return localVarFp.getUserRecommendProjectById(userRecommendProjectId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Update an existing userRecommendProject
         * @param {number} userRecommendProjectId ID of userRecommendProject to return
         * @param {ApiUserRecommendProject} apiUserRecommendProject userRecommendProject object that needs to be added to the store
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateUserRecommendProject(userRecommendProjectId: number, apiUserRecommendProject: ApiUserRecommendProject, options?: any): AxiosPromise<ApiUserRecommendProjectSingle> {
            return localVarFp.updateUserRecommendProject(userRecommendProjectId, apiUserRecommendProject, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * UserRecommendProjectsApi - object-oriented interface
 * @export
 * @class UserRecommendProjectsApi
 * @extends {BaseAPI}
 */
export class UserRecommendProjectsApi extends BaseAPI {
    /**
     * 
     * @summary Add a new userRecommendProject
     * @param {ApiUserRecommendProjectToAdd} apiUserRecommendProjectToAdd userRecommendProject object that needs to be added
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserRecommendProjectsApi
     */
    public addUserRecommendProject(apiUserRecommendProjectToAdd: ApiUserRecommendProjectToAdd, options?: any) {
        return UserRecommendProjectsApiFp(this.configuration).addUserRecommendProject(apiUserRecommendProjectToAdd, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Deletes a userRecommendProject
     * @param {number} userRecommendProjectId userRecommendProject id to delete
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserRecommendProjectsApi
     */
    public deleteUserRecommendProject(userRecommendProjectId: number, options?: any) {
        return UserRecommendProjectsApiFp(this.configuration).deleteUserRecommendProject(userRecommendProjectId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Returns userRecommendProjects 
     * @param {ApiUserRecommendProjectToSearch} [filter] 
     * @param {string} [sort] sorting column
     * @param {string} [order] ASC / DESC
     * @param {number} [start] Start position of retrieved data
     * @param {number} [end] End position of retrieved data
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserRecommendProjectsApi
     */
    public getAllUserRecommendProjects(filter?: ApiUserRecommendProjectToSearch, sort?: string, order?: string, start?: number, end?: number, options?: any) {
        return UserRecommendProjectsApiFp(this.configuration).getAllUserRecommendProjects(filter, sort, order, start, end, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Returns a single userRecommendProject
     * @summary Find userRecommendProject by ID
     * @param {number} userRecommendProjectId ID of userRecommendProject to return
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserRecommendProjectsApi
     */
    public getUserRecommendProjectById(userRecommendProjectId: number, options?: any) {
        return UserRecommendProjectsApiFp(this.configuration).getUserRecommendProjectById(userRecommendProjectId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Update an existing userRecommendProject
     * @param {number} userRecommendProjectId ID of userRecommendProject to return
     * @param {ApiUserRecommendProject} apiUserRecommendProject userRecommendProject object that needs to be added to the store
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserRecommendProjectsApi
     */
    public updateUserRecommendProject(userRecommendProjectId: number, apiUserRecommendProject: ApiUserRecommendProject, options?: any) {
        return UserRecommendProjectsApiFp(this.configuration).updateUserRecommendProject(userRecommendProjectId, apiUserRecommendProject, options).then((request) => request(this.axios, this.basePath));
    }
}
