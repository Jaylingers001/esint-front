/* tslint:disable */
/* eslint-disable */
/**
 * mtg_server
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import globalAxios, { AxiosPromise, AxiosInstance } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { ApiPasswordReminder } from '../model';
// @ts-ignore
import { ApiPasswordReset } from '../model';
/**
 * PasswordReminderApi - axios parameter creator
 * @export
 */
export const PasswordReminderApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Request a new passwordReminder
         * @param {ApiPasswordReminder} apiPasswordReminder passwordReminder object that needs to be added
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addPasswordReminder: async (apiPasswordReminder: ApiPasswordReminder, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'apiPasswordReminder' is not null or undefined
            assertParamExists('addPasswordReminder', 'apiPasswordReminder', apiPasswordReminder)
            const localVarPath = `/passwordReminder`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(apiPasswordReminder, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Reset a password
         * @param {ApiPasswordReset} [apiPasswordReset] passwordReminder object that needs to be added
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addPasswordReset: async (apiPasswordReset?: ApiPasswordReset, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/passwordReminder/resetPassword`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(apiPasswordReset, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * PasswordReminderApi - functional programming interface
 * @export
 */
export const PasswordReminderApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = PasswordReminderApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Request a new passwordReminder
         * @param {ApiPasswordReminder} apiPasswordReminder passwordReminder object that needs to be added
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async addPasswordReminder(apiPasswordReminder: ApiPasswordReminder, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.addPasswordReminder(apiPasswordReminder, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Reset a password
         * @param {ApiPasswordReset} [apiPasswordReset] passwordReminder object that needs to be added
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async addPasswordReset(apiPasswordReset?: ApiPasswordReset, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.addPasswordReset(apiPasswordReset, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * PasswordReminderApi - factory interface
 * @export
 */
export const PasswordReminderApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = PasswordReminderApiFp(configuration)
    return {
        /**
         * 
         * @summary Request a new passwordReminder
         * @param {ApiPasswordReminder} apiPasswordReminder passwordReminder object that needs to be added
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addPasswordReminder(apiPasswordReminder: ApiPasswordReminder, options?: any): AxiosPromise<void> {
            return localVarFp.addPasswordReminder(apiPasswordReminder, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Reset a password
         * @param {ApiPasswordReset} [apiPasswordReset] passwordReminder object that needs to be added
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addPasswordReset(apiPasswordReset?: ApiPasswordReset, options?: any): AxiosPromise<void> {
            return localVarFp.addPasswordReset(apiPasswordReset, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * PasswordReminderApi - object-oriented interface
 * @export
 * @class PasswordReminderApi
 * @extends {BaseAPI}
 */
export class PasswordReminderApi extends BaseAPI {
    /**
     * 
     * @summary Request a new passwordReminder
     * @param {ApiPasswordReminder} apiPasswordReminder passwordReminder object that needs to be added
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PasswordReminderApi
     */
    public addPasswordReminder(apiPasswordReminder: ApiPasswordReminder, options?: any) {
        return PasswordReminderApiFp(this.configuration).addPasswordReminder(apiPasswordReminder, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Reset a password
     * @param {ApiPasswordReset} [apiPasswordReset] passwordReminder object that needs to be added
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PasswordReminderApi
     */
    public addPasswordReset(apiPasswordReset?: ApiPasswordReset, options?: any) {
        return PasswordReminderApiFp(this.configuration).addPasswordReset(apiPasswordReset, options).then((request) => request(this.axios, this.basePath));
    }
}
