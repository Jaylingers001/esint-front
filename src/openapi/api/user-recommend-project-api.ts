/* tslint:disable */
/* eslint-disable */
/**
 * mtg_server
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import globalAxios, {AxiosInstance, AxiosPromise} from 'axios';
import {Configuration} from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import {
    assertParamExists,
    createRequestFunction,
    DUMMY_BASE_URL,
    serializeDataIfNeeded,
    setApiKeyToObject,
    setBasicAuthToObject,
    setBearerAuthToObject,
    setOAuthToObject,
    setSearchParams,
    toPathString
} from '../common';
// @ts-ignore
import {BASE_PATH, BaseAPI, COLLECTION_FORMATS, RequestArgs, RequiredError} from '../base';
// @ts-ignore
// @ts-ignore
// @ts-ignore
import {ApiUserRecommendProject, ApiUserRecommendProjectSingle, ApiUserRecommendProjectToAdd} from '../model';

/**
 * UserRecommendProjectApi - axios parameter creator
 * @export
 */
export const UserRecommendProjectApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         *
         * @summary Add a new userRecommendProject
         * @param {ApiUserRecommendProjectToAdd} apiUserRecommendProjectToAdd userRecommendProject object that needs to be added
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addUserRecommendProject: async (apiUserRecommendProjectToAdd: ApiUserRecommendProjectToAdd, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'apiUserRecommendProjectToAdd' is not null or undefined
            assertParamExists('addUserRecommendProject', 'apiUserRecommendProjectToAdd', apiUserRecommendProjectToAdd)
            const localVarPath = `/userRecommendProjects`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = {method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(apiUserRecommendProjectToAdd, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Deletes a userRecommendProject
         * @param {number} userRecommendProjectId userRecommendProject id to delete
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteUserRecommendProject: async (userRecommendProjectId: number, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'userRecommendProjectId' is not null or undefined
            assertParamExists('deleteUserRecommendProject', 'userRecommendProjectId', userRecommendProjectId)
            const localVarPath = `/userRecommendProjects/{userRecommendProjectId}`
                .replace(`{${"userRecommendProjectId"}}`, encodeURIComponent(String(userRecommendProjectId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = {method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns a single userRecommendProject
         * @summary Find userRecommendProject by ID
         * @param {number} userRecommendProjectId ID of userRecommendProject to return
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUserRecommendProjectById: async (userRecommendProjectId: number, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'userRecommendProjectId' is not null or undefined
            assertParamExists('getUserRecommendProjectById', 'userRecommendProjectId', userRecommendProjectId)
            const localVarPath = `/userRecommendProjects/{userRecommendProjectId}`
                .replace(`{${"userRecommendProjectId"}}`, encodeURIComponent(String(userRecommendProjectId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = {method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Update an existing userRecommendProject
         * @param {number} userRecommendProjectId ID of userRecommendProject to return
         * @param {ApiUserRecommendProject} apiUserRecommendProject userRecommendProject object that needs to be added to the store
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateUserRecommendProject: async (userRecommendProjectId: number, apiUserRecommendProject: ApiUserRecommendProject, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'userRecommendProjectId' is not null or undefined
            assertParamExists('updateUserRecommendProject', 'userRecommendProjectId', userRecommendProjectId)
            // verify required parameter 'apiUserRecommendProject' is not null or undefined
            assertParamExists('updateUserRecommendProject', 'apiUserRecommendProject', apiUserRecommendProject)
            const localVarPath = `/userRecommendProjects/{userRecommendProjectId}`
                .replace(`{${"userRecommendProjectId"}}`, encodeURIComponent(String(userRecommendProjectId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = {method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(apiUserRecommendProject, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * UserRecommendProjectApi - functional programming interface
 * @export
 */
export const UserRecommendProjectApiFp = function (configuration?: Configuration) {
    const localVarAxiosParamCreator = UserRecommendProjectApiAxiosParamCreator(configuration)
    return {
        /**
         *
         * @summary Add a new userRecommendProject
         * @param {ApiUserRecommendProjectToAdd} apiUserRecommendProjectToAdd userRecommendProject object that needs to be added
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async addUserRecommendProject(apiUserRecommendProjectToAdd: ApiUserRecommendProjectToAdd, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApiUserRecommendProjectSingle>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.addUserRecommendProject(apiUserRecommendProjectToAdd, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         *
         * @summary Deletes a userRecommendProject
         * @param {number} userRecommendProjectId userRecommendProject id to delete
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteUserRecommendProject(userRecommendProjectId: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApiUserRecommendProjectSingle>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteUserRecommendProject(userRecommendProjectId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Returns a single userRecommendProject
         * @summary Find userRecommendProject by ID
         * @param {number} userRecommendProjectId ID of userRecommendProject to return
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getUserRecommendProjectById(userRecommendProjectId: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApiUserRecommendProjectSingle>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getUserRecommendProjectById(userRecommendProjectId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         *
         * @summary Update an existing userRecommendProject
         * @param {number} userRecommendProjectId ID of userRecommendProject to return
         * @param {ApiUserRecommendProject} apiUserRecommendProject userRecommendProject object that needs to be added to the store
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateUserRecommendProject(userRecommendProjectId: number, apiUserRecommendProject: ApiUserRecommendProject, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApiUserRecommendProjectSingle>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateUserRecommendProject(userRecommendProjectId, apiUserRecommendProject, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * UserRecommendProjectApi - factory interface
 * @export
 */
export const UserRecommendProjectApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = UserRecommendProjectApiFp(configuration)
    return {
        /**
         *
         * @summary Add a new userRecommendProject
         * @param {ApiUserRecommendProjectToAdd} apiUserRecommendProjectToAdd userRecommendProject object that needs to be added
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addUserRecommendProject(apiUserRecommendProjectToAdd: ApiUserRecommendProjectToAdd, options?: any): AxiosPromise<ApiUserRecommendProjectSingle> {
            return localVarFp.addUserRecommendProject(apiUserRecommendProjectToAdd, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Deletes a userRecommendProject
         * @param {number} userRecommendProjectId userRecommendProject id to delete
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteUserRecommendProject(userRecommendProjectId: number, options?: any): AxiosPromise<ApiUserRecommendProjectSingle> {
            return localVarFp.deleteUserRecommendProject(userRecommendProjectId, options).then((request) => request(axios, basePath));
        },
        /**
         * Returns a single userRecommendProject
         * @summary Find userRecommendProject by ID
         * @param {number} userRecommendProjectId ID of userRecommendProject to return
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUserRecommendProjectById(userRecommendProjectId: number, options?: any): AxiosPromise<ApiUserRecommendProjectSingle> {
            return localVarFp.getUserRecommendProjectById(userRecommendProjectId, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Update an existing userRecommendProject
         * @param {number} userRecommendProjectId ID of userRecommendProject to return
         * @param {ApiUserRecommendProject} apiUserRecommendProject userRecommendProject object that needs to be added to the store
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateUserRecommendProject(userRecommendProjectId: number, apiUserRecommendProject: ApiUserRecommendProject, options?: any): AxiosPromise<ApiUserRecommendProjectSingle> {
            return localVarFp.updateUserRecommendProject(userRecommendProjectId, apiUserRecommendProject, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * UserRecommendProjectApi - object-oriented interface
 * @export
 * @class UserRecommendProjectApi
 * @extends {BaseAPI}
 */
export class UserRecommendProjectApi extends BaseAPI {
    /**
     *
     * @summary Add a new userRecommendProject
     * @param {ApiUserRecommendProjectToAdd} apiUserRecommendProjectToAdd userRecommendProject object that needs to be added
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserRecommendProjectApi
     */
    public addUserRecommendProject(apiUserRecommendProjectToAdd: ApiUserRecommendProjectToAdd, options?: any) {
        return UserRecommendProjectApiFp(this.configuration).addUserRecommendProject(apiUserRecommendProjectToAdd, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     *
     * @summary Deletes a userRecommendProject
     * @param {number} userRecommendProjectId userRecommendProject id to delete
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserRecommendProjectApi
     */
    public deleteUserRecommendProject(userRecommendProjectId: number, options?: any) {
        return UserRecommendProjectApiFp(this.configuration).deleteUserRecommendProject(userRecommendProjectId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Returns a single userRecommendProject
     * @summary Find userRecommendProject by ID
     * @param {number} userRecommendProjectId ID of userRecommendProject to return
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserRecommendProjectApi
     */
    public getUserRecommendProjectById(userRecommendProjectId: number, options?: any) {
        return UserRecommendProjectApiFp(this.configuration).getUserRecommendProjectById(userRecommendProjectId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     *
     * @summary Update an existing userRecommendProject
     * @param {number} userRecommendProjectId ID of userRecommendProject to return
     * @param {ApiUserRecommendProject} apiUserRecommendProject userRecommendProject object that needs to be added to the store
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserRecommendProjectApi
     */
    public updateUserRecommendProject(userRecommendProjectId: number, apiUserRecommendProject: ApiUserRecommendProject, options?: any) {
        return UserRecommendProjectApiFp(this.configuration).updateUserRecommendProject(userRecommendProjectId, apiUserRecommendProject, options).then((request) => request(this.axios, this.basePath));
    }
}
