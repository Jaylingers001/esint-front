/* tslint:disable */
/* eslint-disable */
/**
 * esint_server
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import globalAxios, { AxiosPromise, AxiosInstance } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { ApiProjectToSearch } from '../model';
// @ts-ignore
import { ApiProjectsSearch } from '../model';

import CONFIG from "../../const/DaoConfig";
/**
 * MypageRecommendationsApi - axios parameter creator
 * @export
 */
export const MypageRecommendationsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         *
         * @summary Returns mypageRecommendations
         * @param {string} [sort] sorting column
         * @param {string} [order] ASC / DESC
         * @param {number} [start] Start position of retrieved data
         * @param {number} [end] End position of retrieved data
         * @param {ApiProjectToSearch} [apiProjectToSearch]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllMypageRecommendations: async (filter?:ApiProjectsSearch,sort?: string, order?: string, start?: number, end?: number, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/mypage/recommendations`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            let localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (sort !== undefined) {
                localVarQueryParameter['_sort'] = sort;
            }

            if (order !== undefined) {
                localVarQueryParameter['_order'] = order;
            }

            if (start !== undefined) {
                localVarQueryParameter['_start'] = start;
            }

            if (end !== undefined) {
                localVarQueryParameter['_end'] = end;
            }



            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarHeaderParameter = CONFIG().CONFIG_HEADER().headers

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * MypageRecommendationsApi - functional programming interface
 * @export
 */
export const MypageRecommendationsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = MypageRecommendationsApiAxiosParamCreator(configuration)
    return {
        /**
         *
         * @summary Returns mypageRecommendations
         * @param {string} [sort] sorting column
         * @param {string} [order] ASC / DESC
         * @param {number} [start] Start position of retrieved data
         * @param {number} [end] End position of retrieved data
         * @param {ApiProjectToSearch} [apiProjectToSearch]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAllMypageRecommendations(filter?:ApiProjectsSearch,sort?: string, order?: string, start?: number, end?: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApiProjectsSearch>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAllMypageRecommendations(filter,sort, order, start, end, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * MypageRecommendationsApi - factory interface
 * @export
 */
export const MypageRecommendationsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = MypageRecommendationsApiFp(configuration)
    return {
        /**
         *
         * @summary Returns mypageRecommendations
         * @param {string} [sort] sorting column
         * @param {string} [order] ASC / DESC
         * @param {number} [start] Start position of retrieved data
         * @param {number} [end] End position of retrieved data
         * @param {ApiProjectToSearch} [apiProjectToSearch]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllMypageRecommendations(filter?:ApiProjectsSearch, sort?: string, order?: string, start?: number, end?: number, options?: any): AxiosPromise<ApiProjectsSearch> {
            return localVarFp.getAllMypageRecommendations(filter,sort, order, start, end, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * MypageRecommendationsApi - object-oriented interface
 * @export
 * @class MypageRecommendationsApi
 * @extends {BaseAPI}
 */
export class MypageRecommendationsApi extends BaseAPI {
    /**
     *
     * @summary Returns mypageRecommendations
     * @param {string} [sort] sorting column
     * @param {string} [order] ASC / DESC
     * @param {number} [start] Start position of retrieved data
     * @param {number} [end] End position of retrieved data
     * @param {ApiProjectToSearch} [apiProjectToSearch]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MypageRecommendationsApi
     */
    public getAllMypageRecommendations(filter?:ApiProjectsSearch,sort?: string, order?: string, start?: number, end?: number, options?: any) {
        return MypageRecommendationsApiFp(this.configuration).getAllMypageRecommendations(filter,sort, order, start, end, options).then((request) => request(this.axios, this.basePath));
    }
}
